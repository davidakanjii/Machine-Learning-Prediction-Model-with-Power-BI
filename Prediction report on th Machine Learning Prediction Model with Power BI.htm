<html><style>body {
color: #000000;
background-color: #FFFFFF;
font-size: 24;
font-family: Serif;
font-weight: bold;
font-style: italic;
}
h1, h2, h3, h4, h5, h6 {
color: #000000;
background-color: #FFFFFF;
font-size: 24;
font-family: Serif;
font-weight: bold;
font-style: italic;
}
table, pre {
color: #000000;
background-color: #FFFFFF;
font-size: 16;
font-family: Serif;
font-weight: normal;
font-style: normal;
}

ul, #myUL {
  list-style-type: none;
}

#myUL {
  margin: 0;
  padding: 0;
}

.caret, .dropDownCaret {
  cursor: pointer;
}

.caret::before {
	content: "\25B6";
	color: black;
	display: inline - block;
	margin - right: 6px;
}

.dropDownCaret::before {
	content: "\25BC";
	color: black;
	display: inline - block;
	margin - right: 6px;
	float: right;
}


.nested {
  display: none;
}

.active {
  display: block;
}
</style><body><br></br><h1><div>Power BI Documentation</div></h1><br></br><hr></hr><h2><div>Generated by <a href="http://radacad.com/power-bi-helper">Power BI Helper</a> (Copyright &copy; <a href="http://radacad.com">RADACAD</a>).</div><br></br><div>Date: 4/24/2023 2:58:39 AM</div><br></br></h2><h1><div>------------------******   Visualization    ******---------------------</div></h1><br></br><h2><div>File: Prediction report for David ML[David ML].pbix</div></h2><br></br><h3><div>Path: D:\PP\Dataproanalytic\Learning Content\My Past Power BI Training Project\Prediction report for David ML[David ML].pbix</div></h2><br></br><hr></hr><br></br><h3><div>List of Pages:</div></h3><br></br><table border='1px' cellpadding='1'><tr ><td >DisplayName</td><td >Name</td><td >Ordinal</td><td >DisplayOption</td><td >Width</td><td >Height</td><td >PageIndex</td></tr><tr ><td >Model Performance</td><td >ReportSectiond9def7b9b30452bda054</td><td >0</td><td >3</td><td >1280</td><td >1400</td><td >0</td></tr><tr ><td >Accuracy Report</td><td >ReportSection</td><td >1</td><td >3</td><td >1280</td><td >1400</td><td >1</td></tr><tr ><td >Training Details</td><td >ReportSection121981df55d1bcd76f40</td><td >2</td><td >3</td><td >1280</td><td >2550</td><td >2</td></tr></table><hr></hr><br></br><h3><div>Visuals in Model Performance:</div></h3><table border='1px' cellpadding='1'><tr ><td >Visual Type</td><td >Title</td><td >X</td><td >Y</td><td >Z</td><td >Width</td><td >Height</td><td >Name</td><td >tabOrder</td><td >VisualIndex</td><td >PageIndex</td></tr><tr ><td >basicShape</td><td ></td><td >54</td><td >42</td><td >3000</td><td >33</td><td >72</td><td >485d1db653207401ee2c</td><td ></td><td >0</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >87</td><td >39</td><td >4000</td><td >233</td><td >83</td><td >d470781e2360c272acd1</td><td >1000</td><td >1</td><td >0</td></tr><tr ><td >basicShape</td><td ></td><td >71</td><td >139</td><td >5000</td><td >1133</td><td >189</td><td >4de6d0d72074650b382b</td><td >2000</td><td >2</td><td >0</td></tr><tr ><td >card</td><td >'How the model was tested'</td><td >780</td><td >414</td><td >6000</td><td >500</td><td >86</td><td >aecc00a10bbb0199450a</td><td >3000</td><td >3</td><td >0</td></tr><tr ><td >card</td><td >'This means that'</td><td >630</td><td >418</td><td >7000</td><td >134</td><td >84</td><td >ca8a14b3d9273c350259</td><td >4000</td><td >4</td><td >0</td></tr><tr ><td >card</td><td >'And'</td><td >633</td><td >498</td><td >8000</td><td >127</td><td >84</td><td >b7ce2cf5139b9e49607a</td><td >5000</td><td >5</td><td >0</td></tr><tr ><td >card</td><td >'How the model was tested'</td><td >781</td><td >483</td><td >9000</td><td >490</td><td >97</td><td >ccc42fe6996571b665b9</td><td >6000</td><td >6</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >646.5</td><td >630</td><td >10000</td><td >77</td><td >55</td><td >d7d71c0aee04007b6249</td><td >7000</td><td >7</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >1007.5</td><td >629</td><td >11000</td><td >76</td><td >56</td><td >8bc881acb3c1033852ce</td><td >8000</td><td >8</td><td >0</td></tr><tr ><td >basicShape</td><td ></td><td >71</td><td >328</td><td >23000</td><td >1133</td><td >454</td><td >f2200c458068c07bdc26</td><td >9000</td><td >9</td><td >0</td></tr><tr ><td >columnChart</td><td ></td><td >631</td><td >360</td><td >24000</td><td >528</td><td >390</td><td >6ec46633e713eb841131</td><td >10000</td><td >10</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >565</td><td >210</td><td >24500</td><td >283</td><td >55</td><td >564ff45db5ea4d8099ab</td><td >43000</td><td >11</td><td >0</td></tr><tr ><td >barChart</td><td >'Top predictors by influence'</td><td >96</td><td >360</td><td >25000</td><td >553</td><td >390</td><td >1b0b70c07c8bcde6d685</td><td >11000</td><td >12</td><td >0</td></tr><tr ><td >image</td><td ></td><td >1163</td><td >330</td><td >31000</td><td >27</td><td >25</td><td >b7a19f933387788b25db</td><td >12000</td><td >13</td><td >0</td></tr><tr ><td >actionButton</td><td >'Hide button2'</td><td >1142</td><td >330</td><td >32000</td><td >48</td><td >30</td><td >420f033b5ee41de012c0</td><td >13000</td><td >14</td><td >0</td></tr><tr ><td >actionButton</td><td >'Show button'</td><td >889</td><td >247</td><td >12000</td><td >238</td><td >43</td><td >b7e8932c04e71a6710c8</td><td >14000</td><td >15</td><td >0</td></tr><tr ><td >textbox</td><td >'Text box'</td><td >1030</td><td >312</td><td >13000</td><td >146</td><td >35</td><td >403ac2c0a1253b06974d</td><td >15000</td><td >16</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >144</td><td >170</td><td >14000</td><td >273</td><td >47</td><td >8467c45ec5e1005d983b</td><td >16000</td><td >17</td><td >0</td></tr><tr ><td >tableEx</td><td >'How the model was tested'</td><td >139</td><td >189</td><td >15000</td><td >408</td><td >143</td><td >87c8a600ba260005e582</td><td >17000</td><td >18</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >887</td><td >169</td><td >16000</td><td >240</td><td >96</td><td >42487a8853d5b72bac57</td><td >18000</td><td >19</td><td >0</td></tr><tr ><td ></td><td ></td><td >80</td><td >750</td><td >0</td><td >1116</td><td >590</td><td >5417d51fa603f708131b</td><td >44000</td><td >20</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >0</td><td >0</td><td >3000</td><td >1072</td><td >60</td><td >4a95f6d5d3574322ad8d</td><td >19000</td><td >21</td><td >0</td></tr><tr ><td >lineChart</td><td ></td><td >18</td><td >83</td><td >2000</td><td >582</td><td >507</td><td >aee2e884be840292cab4</td><td >21000</td><td >22</td><td >0</td></tr><tr ><td ></td><td ></td><td >653</td><td >103</td><td >4000</td><td >450</td><td >346</td><td >01afe5d4c97baa9688b7</td><td >25000</td><td >23</td><td >0</td></tr><tr ><td >slicer</td><td >'Population Size'</td><td >0</td><td >0</td><td >2000</td><td >450</td><td >108</td><td >f6b9b09a99ec70810996</td><td >23000</td><td >24</td><td >0</td></tr><tr ><td >slicer</td><td >'Unit Cost'</td><td >0</td><td >117</td><td >1000</td><td >450</td><td >108</td><td >b092273bd9404780d10b</td><td >25000</td><td >25</td><td >0</td></tr><tr ><td >slicer</td><td >'Unit Benefit'</td><td >0</td><td >238</td><td >0</td><td >450</td><td >108</td><td >8c06bef48020b295547c</td><td >24000</td><td >26</td><td >0</td></tr><tr ><td >textbox</td><td >'CBText'</td><td >746</td><td >50</td><td >5000</td><td >346</td><td >361</td><td >d23f2d6f57ca13393650</td><td >38000</td><td >27</td><td >0</td></tr><tr ><td >card</td><td ></td><td >634</td><td >461</td><td >1000</td><td >469</td><td >127</td><td >5757eac2dec5610017ab</td><td >26000</td><td >28</td><td >0</td></tr><tr ><td >basicShape</td><td ></td><td >718</td><td >50</td><td >4500</td><td >398</td><td >373</td><td >1d143df01189b728799d</td><td >44000</td><td >29</td><td >0</td></tr><tr ><td >slicer</td><td >'Probability Threshold'</td><td >715.5</td><td >582</td><td >17000</td><td >306</td><td >106</td><td >2355c18011abec4244be</td><td >22000</td><td >30</td><td >0</td></tr><tr ><td ></td><td ></td><td >100</td><td >328</td><td >18000</td><td >452</td><td >347</td><td >45dfef0b336a3327122d</td><td >33000</td><td >31</td><td >0</td></tr><tr ><td >card</td><td ></td><td >308</td><td >104</td><td >3000</td><td >144</td><td >120</td><td >c64bc0d42389313074be</td><td >28000</td><td >32</td><td >0</td></tr><tr ><td >card</td><td ></td><td >161</td><td >104</td><td >2000</td><td >144</td><td >120</td><td >124600d75790a3d4dda3</td><td >29000</td><td >33</td><td >0</td></tr><tr ><td >card</td><td ></td><td >161</td><td >227</td><td >0</td><td >144</td><td >120</td><td >3021c253d013b0b156d4</td><td >30000</td><td >34</td><td >0</td></tr><tr ><td >card</td><td ></td><td >308</td><td >227</td><td >1000</td><td >144</td><td >120</td><td >f73c6490d0b9a859e83d</td><td >27000</td><td >35</td><td >0</td></tr><tr ><td >card</td><td ></td><td >0</td><td >227</td><td >6000</td><td >157</td><td >120</td><td >8c8d3888dc42c237bc30</td><td >33000</td><td >36</td><td >0</td></tr><tr ><td >card</td><td ></td><td >0</td><td >104</td><td >4000</td><td >157</td><td >120</td><td >115282e137dd8adc00d8</td><td >31000</td><td >37</td><td >0</td></tr><tr ><td >card</td><td ></td><td >161</td><td >0</td><td >7000</td><td >145</td><td >97</td><td >11f03a46388b66946370</td><td >20000</td><td >38</td><td >0</td></tr><tr ><td >card</td><td ></td><td >308</td><td >0</td><td >5000</td><td >144</td><td >97</td><td >89fcb3c37e1ed5c03103</td><td >32000</td><td >39</td><td >0</td></tr><tr ><td ></td><td ></td><td >583</td><td >377</td><td >26000</td><td >630</td><td >1023</td><td >bb14a2fa273fd1269dfa</td><td >52000</td><td >40</td><td >0</td></tr><tr ><td >tableEx</td><td >'How the model was tested'</td><td >37</td><td >423</td><td >1000</td><td >248</td><td >543</td><td >9d8dd0957905504be349</td><td >45000</td><td >41</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >37</td><td >106</td><td >2000</td><td >235</td><td >319</td><td >0af500d94fec6945334c</td><td >46000</td><td >42</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >306</td><td >549</td><td >5000</td><td >299</td><td >90</td><td >b77a84ddf68163c89f2c</td><td >47000</td><td >43</td><td >0</td></tr><tr ><td >tableEx</td><td >'How the model was tested'</td><td >306</td><td >577</td><td >6000</td><td >300</td><td >385</td><td >54476d9ba85c7258af6a</td><td >48000</td><td >44</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >313</td><td >48</td><td >7000</td><td >212</td><td >99</td><td >8e07cf357c69d66fff01</td><td >49000</td><td >45</td><td >0</td></tr><tr ><td >tableEx</td><td ></td><td >308</td><td >75</td><td >8500</td><td >299</td><td >437</td><td >bf88a386ec1c2972558b</td><td >50000</td><td >46</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >38</td><td >48</td><td >9000</td><td >277</td><td >86</td><td >02a7e87b8ddc3456e5e2</td><td >51000</td><td >47</td><td >0</td></tr><tr ><td >basicShape</td><td ></td><td >0</td><td >0</td><td >0</td><td >630</td><td >1023</td><td >d4abf5a0a3f9504aaef6</td><td >52000</td><td >48</td><td >0</td></tr><tr ><td >multiRowCard</td><td >'Final Model'</td><td >647</td><td >254</td><td >19000</td><td >123</td><td >71</td><td >30e27e27c05e290c1c69</td><td >34000</td><td >49</td><td >0</td></tr><tr ><td >textbox</td><td ></td><td >605</td><td >173</td><td >20000</td><td >183</td><td >37</td><td >0bda4399acc57ed2a372</td><td >35000</td><td >50</td><td >0</td></tr><tr ><td >actionButton</td><td >'Show Text'</td><td >1149</td><td >358</td><td >21000</td><td >41</td><td >39</td><td >b0eddf547b7f387fc93b</td><td >36000</td><td >51</td><td >0</td></tr><tr ><td >actionButton</td><td >'ShowCBTextButton'</td><td >798</td><td >760</td><td >22000</td><td >100</td><td >40</td><td >e21011c2bce28b6de55f</td><td >37000</td><td >52</td><td >0</td></tr><tr ><td >image</td><td >'Close image'</td><td >1151</td><td >397</td><td >27000</td><td >39</td><td >27</td><td >01f75d25de6b01e4916f</td><td >39000</td><td >53</td><td >0</td></tr><tr ><td >image</td><td >'Close image'</td><td >1160</td><td >808</td><td >28000</td><td >30</td><td >25</td><td >bbb154501e8138c782ff</td><td >40000</td><td >54</td><td >0</td></tr><tr ><td >actionButton</td><td >'Close button main text'</td><td >1151</td><td >397</td><td >29000</td><td >44</td><td >28</td><td >c347c330b266ff6c9844</td><td >41000</td><td >55</td><td >0</td></tr><tr ><td >actionButton</td><td >'Close button'</td><td >1166</td><td >808</td><td >30000</td><td >24</td><td >25</td><td >e75bb8b387641449f6fb</td><td >42000</td><td >56</td><td >0</td></tr></table><br></br><h3><div>Visuals in Accuracy Report:</div></h3><table border='1px' cellpadding='1'><tr ><td >Visual Type</td><td >Title</td><td >X</td><td >Y</td><td >Z</td><td >Width</td><td >Height</td><td >Name</td><td >tabOrder</td><td >VisualIndex</td><td >PageIndex</td></tr><tr ><td >lineChart</td><td >'Cumulative Gains Chart'</td><td >66</td><td >884</td><td >1000</td><td >560</td><td >473</td><td >749ac7b02e1eb0c97020</td><td ></td><td >0</td><td >1</td></tr><tr ><td >areaChart</td><td >'ROC Curve'</td><td >638</td><td >884</td><td >2000</td><td >560</td><td >473</td><td >7d76b937c4ab612c0268</td><td >1000</td><td >1</td><td >1</td></tr><tr ><td >textbox</td><td ></td><td >64</td><td >392</td><td >3000</td><td >552</td><td >432</td><td >23fa2514d04e167a61e7</td><td >2000</td><td >2</td><td >1</td></tr><tr ><td >textbox</td><td ></td><td >640</td><td >392</td><td >4000</td><td >576</td><td >432</td><td >8f847c658ae0c0dae04d</td><td >3000</td><td >3</td><td >1</td></tr><tr ><td >textbox</td><td ></td><td >80</td><td >39</td><td >5000</td><td >233</td><td >83</td><td >f9d816b32cc2ae827930</td><td >4000</td><td >4</td><td >1</td></tr><tr ><td >basicShape</td><td ></td><td >54</td><td >42</td><td >6000</td><td >33</td><td >71</td><td >1bfaa5b467daed91847a</td><td >5000</td><td >5</td><td >1</td></tr><tr ><td >basicShape</td><td ></td><td >63</td><td >140</td><td >7000</td><td >1152</td><td >196</td><td >a13f539aa984981a0322</td><td >6000</td><td >6</td><td >1</td></tr><tr ><td >multiRowCard</td><td >'Final Model'</td><td >826</td><td >210</td><td >8000</td><td >136</td><td >70</td><td >e3870901051776eab05b</td><td >7000</td><td >7</td><td >1</td></tr><tr ><td >textbox</td><td ></td><td >780</td><td >178</td><td >9000</td><td >228</td><td >48</td><td >2379bc92d08245eb7ad4</td><td >8000</td><td >8</td><td >1</td></tr><tr ><td >textbox</td><td ></td><td >100</td><td >177</td><td >10000</td><td >425</td><td >47</td><td >9e302d2c5b71b7140901</td><td >9000</td><td >9</td><td >1</td></tr><tr ><td >basicShape</td><td ></td><td >64</td><td >201</td><td >0</td><td >25</td><td >25</td><td >b0578dc2f256d7be2aa6</td><td >10000</td><td >10</td><td >1</td></tr><tr ><td >textbox</td><td ></td><td >100</td><td >210</td><td >11000</td><td >453</td><td >94</td><td >9bd577cb76003dd728a0</td><td >11000</td><td >11</td><td >1</td></tr></table><br></br><h3><div>Visuals in Training Details:</div></h3><table border='1px' cellpadding='1'><tr ><td >Visual Type</td><td >Title</td><td >X</td><td >Y</td><td >Z</td><td >Width</td><td >Height</td><td >Name</td><td >tabOrder</td><td >VisualIndex</td><td >PageIndex</td></tr><tr ><td >basicShape</td><td ></td><td >64</td><td >800</td><td >3000</td><td >1152</td><td >49</td><td >33c051cfb91b99052a0b</td><td ></td><td >0</td><td >2</td></tr><tr ><td >donutChart</td><td ></td><td >155</td><td >1933</td><td >0</td><td >939</td><td >567</td><td >2cd8d9a4d2559e01a850</td><td >1000</td><td >1</td><td >2</td></tr><tr ><td >textbox</td><td ></td><td >80</td><td >39</td><td >5000</td><td >233</td><td >83</td><td >957438d341bd67ba9dc7</td><td >2000</td><td >2</td><td >2</td></tr><tr ><td >basicShape</td><td ></td><td >54</td><td >42</td><td >6000</td><td >33</td><td >72</td><td >80a2411131d4300d0c1c</td><td >3000</td><td >3</td><td >2</td></tr><tr ><td >basicShape</td><td ></td><td >64</td><td >140</td><td >7000</td><td >1152</td><td >240</td><td >d6ad084d1c0a19344897</td><td >4000</td><td >4</td><td >2</td></tr><tr ><td >textbox</td><td ></td><td >105</td><td >180</td><td >8000</td><td >244</td><td >47</td><td >9d0d4de5e9a03c079ee8</td><td >5000</td><td >5</td><td >2</td></tr><tr ><td >textbox</td><td ></td><td >592</td><td >204</td><td >9000</td><td >144</td><td >32</td><td >2b4522d9005638dc700c</td><td >6000</td><td >6</td><td >2</td></tr><tr ><td >textbox</td><td ></td><td >592</td><td >262</td><td >10000</td><td >144</td><td >32</td><td >9308b70c97d8a0808511</td><td >7000</td><td >7</td><td >2</td></tr><tr ><td >multiRowCard</td><td >'Number Of Iterations'</td><td >744</td><td >207</td><td >11000</td><td >120</td><td >31</td><td >b5d1fc4813ae60ecb4c1</td><td >8000</td><td >8</td><td >2</td></tr><tr ><td >multiRowCard</td><td >'Number Of Iterations'</td><td >744</td><td >261</td><td >12000</td><td >120</td><td >32</td><td >724acea9cc1a03061472</td><td >9000</td><td >9</td><td >2</td></tr><tr ><td >textbox</td><td ></td><td >827</td><td >205</td><td >13000</td><td >157</td><td >33</td><td >9d68b9b45d0eda00c301</td><td >10000</td><td >10</td><td >2</td></tr><tr ><td >textbox</td><td ></td><td >827</td><td >259</td><td >14000</td><td >144</td><td >36</td><td >77878dc708c8a6b14a04</td><td >11000</td><td >11</td><td >2</td></tr><tr ><td >multiRowCard</td><td >'Final Model'</td><td >976</td><td >205</td><td >15000</td><td >200</td><td >55</td><td >c62a64e0702e9c1ac45d</td><td >12000</td><td >12</td><td >2</td></tr><tr ><td >multiRowCard</td><td >'Final Model'</td><td >976</td><td >262</td><td >16000</td><td >120</td><td >34</td><td >0f6ed5ac05306a19e9a8</td><td >13000</td><td >13</td><td >2</td></tr><tr ><td >lineChart</td><td >'Model quality over iterations'</td><td >64</td><td >421</td><td >17000</td><td >1152</td><td >377</td><td >cc385b0d0a58b0ed1c44</td><td >14000</td><td >14</td><td >2</td></tr><tr ><td >textbox</td><td ></td><td >64</td><td >840</td><td >18000</td><td >1152</td><td >132</td><td >776564edd04561e04269</td><td >15000</td><td >15</td><td >2</td></tr><tr ><td >tableEx</td><td >'Data Featurization'</td><td >64</td><td >1024</td><td >19000</td><td >560</td><td >632</td><td >1bee6ee01b86082919dc</td><td >16000</td><td >16</td><td >2</td></tr><tr ><td >tableEx</td><td >'Final Parameters Selected'</td><td >656</td><td >1024</td><td >20000</td><td >552</td><td >584</td><td >8856091cdc25ca202434</td><td >17000</td><td >17</td><td >2</td></tr><tr ><td >basicShape</td><td ></td><td >64</td><td >1680</td><td >4000</td><td >1152</td><td >49</td><td >a969da2ff1719a08268a</td><td >18000</td><td >18</td><td >2</td></tr><tr ><td >EnsembleMachineLearningModelsInfoTextBoxA9CD31B0C27540AFA7440DBBFBB714F6</td><td ></td><td >64</td><td >1718</td><td >1000</td><td >1152</td><td >232</td><td >187a95c0441a955d0e09</td><td >19000</td><td >19</td><td >2</td></tr><tr ><td >clusteredColumnChart</td><td ></td><td >80</td><td >2345</td><td >2000</td><td >501</td><td >155</td><td >18dd3e36c80e068aa00a</td><td >20000</td><td >20</td><td >2</td></tr><tr ><td >textbox</td><td ></td><td >105</td><td >215</td><td >21000</td><td >487</td><td >128</td><td >7e65983420619ab9695c</td><td >21000</td><td >21</td><td >2</td></tr></table><hr></hr><br></br><h3><div>List of Bookmarks:</div></h3><br></br><table border='1px' cellpadding='1'><tr ><td >DisplayName</td><td >Page Name</td><td >Index</td><td >Name</td></tr><tr ><td >KeyInfluencersShown</td><td >ReportSectiond9def7b9b30452bda054</td><td >0</td><td >Bookmark43da22d2da50a011020d</td></tr><tr ><td >KeyInfluencersHidden</td><td >ReportSectiond9def7b9b30452bda054</td><td >1</td><td >Bookmark746e63b061188096802b</td></tr><tr ><td >Show Text</td><td >ReportSectiond9def7b9b30452bda054</td><td >2</td><td >Bookmark43e28b1d7244530e64ef</td></tr><tr ><td >Hide Text</td><td >ReportSectiond9def7b9b30452bda054</td><td >3</td><td >Bookmarkec9078b0f1c230606202</td></tr><tr ><td >CBTextHidden</td><td >ReportSectiond9def7b9b30452bda054</td><td >4</td><td >Bookmarkdceafd0ceaed809248b3</td></tr><tr ><td >CBTextShown</td><td >ReportSectiond9def7b9b30452bda054</td><td >5</td><td >Bookmark130bdf9c05d1a6b9cb72</td></tr></table><hr></hr><br></br><h3><div>List of all Columns/Fields/Measures/Expressions Used in Visuals:</div></h3><br></br><table border='1px' cellpadding='1' cellspacing='1'><tr ><td >Name</td><td >Table Name</td><td >Aggregation</td><td >Expression</td><td >VisualIndex</td><td >PageIndex</td></tr><tr ><td >PrecisionSubtext</td><td >Output</td><td ></td><td >Output.PrecisionSubtext</td><td >3</td><td >0</td></tr><tr ><td >Precision</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.Precision</td><td >4</td><td >0</td></tr><tr ><td >Recall</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.Recall</td><td >5</td><td >0</td></tr><tr ><td >RecallSubtext</td><td >Output</td><td ></td><td >Output.RecallSubtext</td><td >6</td><td >0</td></tr><tr ><td >Bin</td><td >KeyInfluencers_Breakdowns</td><td ></td><td >KeyInfluencers_Breakdowns.Bin</td><td >10</td><td >0</td></tr><tr ><td ></td><td >KeyInfluencers_Breakdowns</td><td >Sum</td><td >Sum(KeyInfluencers_Breakdowns.% of Positive Outcome)</td><td >10</td><td >0</td></tr><tr ><td >Bin</td><td >KeyInfluencers_Breakdowns</td><td ></td><td >KeyInfluencers_Breakdowns.Bin</td><td >10</td><td >0</td></tr><tr ><td >Feature Importance</td><td >KeyInfluencers_TopPredictors</td><td >Sum</td><td >Sum(KeyInfluencers_TopPredictors.Feature Importance)</td><td >12</td><td >0</td></tr><tr ><td >Feature Name</td><td >KeyInfluencers_TopPredictors</td><td ></td><td >KeyInfluencers_TopPredictors.Feature Name</td><td >12</td><td >0</td></tr><tr ><td >Feature Name</td><td >KeyInfluencers_TopPredictors</td><td ></td><td >KeyInfluencers_TopPredictors.Feature Name</td><td >12</td><td >0</td></tr><tr ><td >ModelTested</td><td >Output</td><td ></td><td >Output.ModelTested</td><td >18</td><td >0</td></tr><tr ><td >Confidence Threshold</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.Confidence Threshold</td><td >22</td><td >0</td></tr><tr ><td >Measure</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.Measure</td><td >22</td><td >0</td></tr><tr ><td >Population</td><td >ProbabilityDistribution</td><td >CountNonNull</td><td >CountNonNull(ProbabilityDistribution.Population)</td><td >22</td><td >0</td></tr><tr ><td >Cost</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.Cost</td><td >22</td><td >0</td></tr><tr ><td >Confidence Threshold</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.Confidence Threshold</td><td >22</td><td >0</td></tr><tr ><td >PopulationSize</td><td >PopulationSize</td><td ></td><td >PopulationSize.PopulationSize</td><td >24</td><td >0</td></tr><tr ><td >PopulationSize</td><td >PopulationSize</td><td ></td><td >PopulationSize.PopulationSize</td><td >24</td><td >0</td></tr><tr ><td >UnitCost</td><td >UnitCost</td><td ></td><td >UnitCost.UnitCost</td><td >25</td><td >0</td></tr><tr ><td >UnitCost</td><td >UnitCost</td><td ></td><td >UnitCost.UnitCost</td><td >25</td><td >0</td></tr><tr ><td >UnitBenefit</td><td >UnitBenefit</td><td ></td><td >UnitBenefit.UnitBenefit</td><td >26</td><td >0</td></tr><tr ><td >UnitBenefit</td><td >UnitBenefit</td><td ></td><td >UnitBenefit.UnitBenefit</td><td >26</td><td >0</td></tr><tr ><td >CostBenefitAnalysis</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.CostBenefitAnalysis</td><td >28</td><td >0</td></tr><tr ><td >Confidence Threshold</td><td >SliderValue</td><td ></td><td >SliderValue.Confidence Threshold</td><td >30</td><td >0</td></tr><tr ><td >Confidence Threshold</td><td >SliderValue</td><td ></td><td >SliderValue.Confidence Threshold</td><td >30</td><td >0</td></tr><tr ><td >OutcomeDistributionValue</td><td >ProbabilityDistributionUnpivot</td><td ></td><td >ProbabilityDistributionUnpivot.OutcomeDistributionValue</td><td >32</td><td >0</td></tr><tr ><td >OutcomeDistributionValue</td><td >ProbabilityDistributionUnpivot</td><td ></td><td >ProbabilityDistributionUnpivot.OutcomeDistributionValue</td><td >33</td><td >0</td></tr><tr ><td >OutcomeDistributionValue</td><td >ProbabilityDistributionUnpivot</td><td ></td><td >ProbabilityDistributionUnpivot.OutcomeDistributionValue</td><td >34</td><td >0</td></tr><tr ><td >OutcomeDistributionValue</td><td >ProbabilityDistributionUnpivot</td><td ></td><td >ProbabilityDistributionUnpivot.OutcomeDistributionValue</td><td >35</td><td >0</td></tr><tr ><td >MatrixActualFalse</td><td >Output</td><td ></td><td >Output.MatrixActualFalse</td><td >36</td><td >0</td></tr><tr ><td >MatrixActualTrue</td><td >Output</td><td ></td><td >Output.MatrixActualTrue</td><td >37</td><td >0</td></tr><tr ><td >MatrixPredictedTrue</td><td >Output</td><td ></td><td >Output.MatrixPredictedTrue</td><td >38</td><td >0</td></tr><tr ><td >MatrixPredictedFalse</td><td >Output</td><td ></td><td >Output.MatrixPredictedFalse</td><td >39</td><td >0</td></tr><tr ><td >InterpretResultsDynamicText</td><td >Output</td><td ></td><td >Output.InterpretResultsDynamicText</td><td >41</td><td >0</td></tr><tr ><td >DecideApplyDynamicText</td><td >Output</td><td ></td><td >Output.DecideApplyDynamicText</td><td >44</td><td >0</td></tr><tr ><td >Precision and recall</td><td >Output</td><td ></td><td >Output.Precision and recall</td><td >46</td><td >0</td></tr><tr ><td >Area under ROC curve</td><td >Output</td><td ></td><td >Output.Area under ROC curve</td><td >49</td><td >0</td></tr><tr ><td >IdealModel</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.IdealModel</td><td >0</td><td >1</td></tr><tr ><td >Random guess</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.Random guess</td><td >0</td><td >1</td></tr><tr ><td >Model</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.Model</td><td >0</td><td >1</td></tr><tr ><td >Population</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.Population</td><td >0</td><td >1</td></tr><tr ><td >Confidence Threshold</td><td >ProbabilityDistribution</td><td >CountNonNull</td><td >CountNonNull(ProbabilityDistribution.Confidence Threshold)</td><td >0</td><td >1</td></tr><tr ><td >Population</td><td >ProbabilityDistribution</td><td ></td><td >ProbabilityDistribution.Population</td><td >0</td><td >1</td></tr><tr ><td >FPR</td><td >ROC</td><td ></td><td >ROC.FPR</td><td >1</td><td >1</td></tr><tr ><td >ModelROC</td><td >ROC</td><td ></td><td >ROC.ModelROC</td><td >1</td><td >1</td></tr><tr ><td >FPR</td><td >ROC</td><td >Min</td><td >Min(ROC.FPR)</td><td >1</td><td >1</td></tr><tr ><td >FPR</td><td >ROC</td><td >Sum</td><td >Sum(ROC.FPR)</td><td >1</td><td >1</td></tr><tr ><td >FPR</td><td >ROC</td><td ></td><td >ROC.FPR</td><td >1</td><td >1</td></tr><tr ><td >Area under ROC curve</td><td >Output</td><td ></td><td >Output.Area under ROC curve</td><td >7</td><td >1</td></tr><tr ><td >Algorithm Details</td><td >EnsembleIterationFullDetails</td><td ></td><td >EnsembleIterationFullDetails.Algorithm Details</td><td >1</td><td >2</td></tr><tr ><td >Weights</td><td >EnsembleIterationFullDetails</td><td >Sum</td><td >Sum(EnsembleIterationFullDetails.Weights)</td><td >1</td><td >2</td></tr><tr ><td >AlgorithmKey</td><td >EnsembleIterationFullDetails</td><td ></td><td >EnsembleIterationFullDetails.AlgorithmKey</td><td >1</td><td >2</td></tr><tr ><td >Algorithm Details</td><td >EnsembleIterationFullDetails</td><td ></td><td >EnsembleIterationFullDetails.Algorithm Details</td><td >1</td><td >2</td></tr><tr ><td >Total Data Sampled</td><td >Output</td><td ></td><td >Output.Total Data Sampled</td><td >8</td><td >2</td></tr><tr ><td >Training Data</td><td >Output</td><td ></td><td >Output.Training Data</td><td >9</td><td >2</td></tr><tr ><td >Algorithm Selected</td><td >IterationDetails</td><td ></td><td >IterationDetails.Algorithm Selected</td><td >12</td><td >2</td></tr><tr ><td >Numbe Of Iterations</td><td >Output</td><td ></td><td >Output.Numbe Of Iterations</td><td >13</td><td >2</td></tr><tr ><td >Index</td><td >IterationDetails</td><td ></td><td >IterationDetails.Index</td><td >14</td><td >2</td></tr><tr ><td >Score</td><td >IterationDetails</td><td >Sum</td><td >Sum(IterationDetails.Score)</td><td >14</td><td >2</td></tr><tr ><td >Estimator Name</td><td >IterationDetails</td><td >Min</td><td >Min(IterationDetails.Estimator Name)</td><td >14</td><td >2</td></tr><tr ><td >Index</td><td >IterationDetails</td><td ></td><td >IterationDetails.Index</td><td >14</td><td >2</td></tr><tr ><td >Feature</td><td >Featurizer</td><td ></td><td >Featurizer.Feature</td><td >16</td><td >2</td></tr><tr ><td >Detected Column Type</td><td >Featurizer</td><td ></td><td >Featurizer.Detected Column Type</td><td >16</td><td >2</td></tr><tr ><td >Imputation</td><td >Featurizer</td><td ></td><td >Featurizer.Imputation</td><td >16</td><td >2</td></tr><tr ><td >1</td><td ></td><td ></td><td >IterationDetailsMax.Value.1</td><td >17</td><td >2</td></tr><tr ><td >2</td><td ></td><td ></td><td >IterationDetailsMax.Value.2</td><td >17</td><td >2</td></tr><tr ><td >Measure</td><td >IsEnsemble</td><td ></td><td >IsEnsemble.Measure</td><td >19</td><td >2</td></tr><tr ><td >Measure</td><td >IsEnsemble</td><td ></td><td >IsEnsemble.Measure</td><td >20</td><td >2</td></tr></table><hr></hr><br></br><h3><div>List of Tables Used in Visuals:</div></h3><br></br><table border='1px' cellpadding='1' cellspacing='1'><tr ><td >Name</td></tr><tr ><td >Output</td></tr><tr ><td >PopulationSize</td></tr><tr ><td >UnitCost</td></tr><tr ><td >UnitBenefit</td></tr><tr ><td >SliderValue</td></tr><tr ><td >ProbabilityDistribution</td></tr><tr ><td >KeyInfluencers_Breakdowns</td></tr><tr ><td >KeyInfluencers_TopPredictors</td></tr><tr ><td >ProbabilityDistributionUnpivot</td></tr><tr ><td >ROC</td></tr><tr ><td >EnsembleIterationFullDetails</td></tr><tr ><td >IterationDetails</td></tr><tr ><td >Featurizer</td></tr><tr ><td >IterationDetailsMax</td></tr><tr ><td >IsEnsemble</td></tr></table><hr></hr><br></br><h3><div>List of Columns Not Used in Visuals:</div></h3><br></br><table border='1px' cellpadding='1' cellspacing='1'><tr ><td >Name</td><td >Table Name</td><td >State</td><td >Data Category</td><td >Data Type</td><td >Description</td><td >Display Folder</td><td >Error Message</td><td >Format String</td><td >Is Hidden</td><td >Modified Time</td><td >Structure Modified Time</td><td >Sort by Column</td><td >Summarize By</td><td >Type</td><td >Expression</td></tr><tr ><td >Actual</td><td >Distribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Predicted</td><td >Distribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Count1</td><td >Distribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Actual</td><td >DataTableDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Predicted</td><td >DataTableDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Counts</td><td >DataTableDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Name</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Value</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Confidence</td><td >PositiveDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Count</td><td >PositiveDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Confidence</td><td >NegativeDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Count</td><td >NegativeDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Precision Check</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Recall Check</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Selectivity Check</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Accuracy Check</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >TP</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >FP</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >TN</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >FN</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >LabelForTrueOutcomes</td><td >LabelForTrueOutcomes</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >LabelForFalseOutcomes</td><td >LabelForFalseOutcomes</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >ParameterName</td><td >Parameters</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >ParameterValue</td><td >Parameters</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >WorkspaceId</td><td >WorkspaceId</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >DataflowId</td><td >DataflowId</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >EntityName</td><td >EntityName</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >LabelColumnName</td><td >LabelColumnName</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Details</td><td >Featurizer</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Transformations</td><td >Featurizer</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Predicted</td><td >ProbabilityDistributionUnpivot</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Value</td><td >ProbabilityDistributionUnpivot</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Actual</td><td >ProbabilityDistributionUnpivot</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Confidence Threshold</td><td >ProbabilityDistributionUnpivot</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >TPR</td><td >ROC</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Estimator</td><td >IterationDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Scaler</td><td >IterationDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Parameter Name</td><td >IterationDetailsMax</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Parameter Value</td><td >IterationDetailsMax</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Index</td><td >EnsembleIterationFullDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Iteration</td><td >EnsembleIterationFullDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >EnsembleIterationAlgorithmNames.Index</td><td >EnsembleIterationFullDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >EnsembleIterationAlgorithmNames.Details.pipeline.1</td><td >EnsembleIterationFullDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Algorithm Score</td><td >EnsembleIterationFullDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Algorithm Name</td><td >EnsembleIterationFullDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Algorithm Parameter Name</td><td >EnsembleIterationFullDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Algorithm Parameter Value</td><td >EnsembleIterationFullDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >IsEnsemble</td><td >IsEnsemble</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Confidence Threshold</td><td >Selector Table</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Feature Type</td><td >KeyInfluencers_TopPredictors</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >Feature Name</td><td >KeyInfluencers_Breakdowns</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >% of Positive Outcome</td><td >KeyInfluencers_Breakdowns</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >COLUMN</td><td ></td></tr><tr ><td >10KScenarioStatement</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >10KPrecisionStatement</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >10KRecallStatement</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >10KActualWins</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >10KPredictedWins</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >10KTruePositiveWins</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >PositivePredictorHeading</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >PositivePredictorBreakdownHeader</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Input row count</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Sampled row count</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Training row count</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Validation row count</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >TrainingSubtitleThreshold</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Benefit Analysis Title</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Cost Analysis Title</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Pipeline Steps</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Model Accuracy</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >ModelTraining</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Final Model Quality</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >ModelParametersTitle</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Precision recall text</td><td >Output</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >False Negative</td><td >PositiveDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >True Positive</td><td >PositiveDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >False Positive</td><td >NegativeDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >True Negative</td><td >NegativeDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Selectivity</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Accuracy</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Profit</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >MaxProfit</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >TargetThreshold</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >ThresholdForMaxProfit</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >PopulationPercentageForMaxProfit</td><td >ProbabilityDistribution</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >FalseLabel</td><td >Parameters</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >TrueLabel</td><td >Parameters</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >LabelColumnName</td><td >Parameters</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Final Algorithm Selected</td><td >IterationDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >AlgorithmParamValue</td><td >EnsembleIterationFullDetails</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >selected</td><td >Selector Table</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >IsTopPredictorSelected</td><td >KeyInfluencers_Breakdowns</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr><tr ><td >Chart title</td><td >KeyInfluencers_Breakdowns</td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td ></td><td >MEASURE</td><td ></td></tr></table><hr></hr><br></br><h3><div>List of Tables Not Used in Visuals:</div></h3><br></br><table border='1px' cellpadding='1' cellspacing='1'><tr ><td >Name</td></tr><tr ><td >Distribution</td></tr><tr ><td >DataTableDistribution</td></tr><tr ><td >PositiveDistribution</td></tr><tr ><td >NegativeDistribution</td></tr><tr ><td >LabelForTrueOutcomes</td></tr><tr ><td >LabelForFalseOutcomes</td></tr><tr ><td >Parameters</td></tr><tr ><td >WorkspaceId</td></tr><tr ><td >DataflowId</td></tr><tr ><td >EntityName</td></tr><tr ><td >LabelColumnName</td></tr><tr ><td >Selector Table</td></tr></table><h1><div>------------------******   Model    ******---------------------</div></h1><br></br><h2><div>Model: Prediction report for David ML[David ML]</div></h2><br></br><hr></hr><br></br><h3><div>List of Tables:</div></h3><br></br><table border='1px' cellpadding='1' cellspacing='1'><tr ><td >Name</td><td >Description</td><td >Storage Mode</td><td >Source</td><td >Is Hidden</td></tr><tr ><td >DateTableTemplate_bf74721a-aede-42c8-8889-ff64aefef54c</td><td ></td><td >Import</td><td ><pre>Calendar(Date(2015,1,1), Date(2015,1,1))</pre></td><td >True</td></tr><tr ><td >SliderValue</td><td ></td><td >Import</td><td ><pre>SUMMARIZE(ProbabilityDistribution,ProbabilityDistribution[Confidence Threshold])</pre></td><td >False</td></tr><tr ><td >Distribution</td><td ></td><td >Import</td><td ><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    VAR TrueP = CALCULATE(AVERAGE(ProbabilityDistribution[TP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR FalseP = CALCULATE(AVERAGE(ProbabilityDistribution[FP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR TrueN = CALCULATE(AVERAGE(ProbabilityDistribution[TN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR FalseN = CALCULATE(AVERAGE(ProbabilityDistribution[FN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    return SELECTCOLUMNS({("Actual Win", "True Positive", TrueP), ("Actual Win", "False Negative", FalseN), ("Actual Loss", "True Negative", TrueN), ("Actual Loss", "False Positive", FalseP)}, "Actual", [Value1], "Predicted", [Value2], "Count", [Value3])</pre></td><td >False</td></tr><tr ><td >DataTableDistribution</td><td ></td><td >Import</td><td ><pre>
    DATATABLE("Actual", string, "Predicted", string, {{"Actual Win", "True Positive"}, {"Actual Win", "False Negative"}, {"Actual Loss", "True Negative"}, {"Actual Loss", "False Positive"}})</pre></td><td >False</td></tr><tr ><td >Output</td><td ></td><td >Import</td><td ><pre>let
    Source = PowerBI.Dataflows([]),
    Workspace = Source{[workspaceId=WorkspaceId]}[Data],
    Dataflow = Workspace{[dataflowId=DataflowId]}[Data],
    ModelOutput = Dataflow{[entity=EntityName]}[Data],
    TrainingResult = ModelOutput{0}[Stats],
    data = Json.Document(TrainingResult as any) as any
in
    data</pre></td><td >False</td></tr><tr ><td >PositiveDistribution</td><td ></td><td >Import</td><td ><pre>let
    Source = Output,
    positiveScoringDistribution = Output[Reports][ScoringDistribution][Positive],
    ConvertedTable = Table.FromRows(positiveScoringDistribution, {"Confidence", "Count"}),
    #"Changed Type" = Table.TransformColumnTypes(ConvertedTable, {{"Confidence", type number}, {"Count", Int64.Type}})
in
    #"Changed Type"</pre></td><td >False</td></tr><tr ><td >NegativeDistribution</td><td ></td><td >Import</td><td ><pre>let
    Source = Output,
    negativeScoringDistribution = Output[Reports][ScoringDistribution][Negative],
    ConvertedTable = Table.FromRows(negativeScoringDistribution, {"Confidence","Count"}),
    #"Changed Type" = Table.TransformColumnTypes(ConvertedTable,{{"Confidence", type number}, {"Count", Int64.Type}})
in
    #"Changed Type"</pre></td><td >False</td></tr><tr ><td >ProbabilityDistribution</td><td ></td><td >Import</td><td ><pre>let
    Source = Output,
    Distribution = Output[Reports][ScoringDistribution][Slider][data],
    ConvertedTable = Table.FromRows(Distribution, {"Confidence Threshold Tmp", "TP", "FP", "TN", "FN"}),
    #"Changed Type" = Table.TransformColumnTypes(ConvertedTable, {{"Confidence Threshold Tmp", type number}, {"TP", Int64.Type}, {"FP", Int64.Type}, {"TN", Int64.Type}, {"FN", Int64.Type}}),
    BUGFIX1 = Table.AddColumn(#"Changed Type", "Confidence Threshold", each [Confidence Threshold Tmp]+.01),
    BUGFIX2 = Table.TransformColumnTypes(BUGFIX1,{{"Confidence Threshold", type number}}),
    BUGFIX3 = Table.RemoveColumns(BUGFIX2,{"Confidence Threshold Tmp"}),
    BUGFIX4 = Table.InsertRows(BUGFIX3, 0, {[TP=List.Max(BUGFIX3[TP]), FP=List.Max(BUGFIX3[FP]), TN=0, FN=0, Confidence Threshold=0.00]}),
    #"Added Custom" = Table.AddColumn(BUGFIX4, "Population", each ([TP]+[FP])/([TP]+[FP]+[TN]+[FN])),
    #"Changed Type1" = Table.TransformColumnTypes(#"Added Custom",{{"Population", Percentage.Type}, {"Confidence Threshold", type number}})
in
    #"Changed Type1"</pre></td><td >False</td></tr><tr ><td >LabelForTrueOutcomes</td><td ></td><td >Import</td><td ><pre>"1" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]</pre></td><td >False</td></tr><tr ><td >LabelForFalseOutcomes</td><td ></td><td >Import</td><td ><pre>"Not 1" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]</pre></td><td >False</td></tr><tr ><td >Parameters</td><td ></td><td >Import</td><td ><pre>let
    paramlist = {{"WorkspaceId",WorkspaceId}, {"DataflowId",DataflowId}, {"EntityName",EntityName}, {"TrueLabel",LabelForTrueOutcomes}, {"FalseLabel", LabelForFalseOutcomes}, {"LabelColumnName", LabelColumnName}, {"LastBookmarkState", LastBookmarkState}, {"LastProbabilityThreshold", LastProbabilityThreshold}},
    #"Converted to Table" = Table.FromList(paramlist , Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    #"Extracted Values" = Table.TransformColumns(#"Converted to Table", {"Column1", each Text.Combine(List.Transform(_, Text.From), ","), type text}),
    #"Split Column by Delimiter" = Table.SplitColumn(#"Extracted Values", "Column1", Splitter.SplitTextByDelimiter(",", QuoteStyle.Csv), {"Column1.1", "Column1.2"}),
    #"Changed Type" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"Column1.1", type text}, {"Column1.2", type text}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"Column1.1", "ParameterName"}, {"Column1.2", "ParameterValue"}})
in
    #"Renamed Columns"</pre></td><td >False</td></tr><tr ><td >WorkspaceId</td><td ></td><td >Import</td><td ><pre>"87fdfdfd-8174-4499-94cd-8d0dec621a6e" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]</pre></td><td >False</td></tr><tr ><td >DataflowId</td><td ></td><td >Import</td><td ><pre>"50d115fd-a0b4-43d2-9afa-ba2e09b9f29e" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]</pre></td><td >False</td></tr><tr ><td >EntityName</td><td ></td><td >Import</td><td ><pre>"David ML" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]</pre></td><td >False</td></tr><tr ><td >LabelColumnName</td><td ></td><td >Import</td><td ><pre>"Buyer" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]</pre></td><td >False</td></tr><tr ><td >Featurizer</td><td ></td><td >Import</td><td ><pre>let
    Source = Output,
    featurizer = Output[Featurizers],
    ConvertedTable = Table.FromRows(featurizer, {"Column1", "Column2"}),
    #"Changed Type" = Table.TransformColumnTypes(ConvertedTable, {{"Column1", type text}, {"Column2", type text}}),
    #"Split Column by Delimiter" = Table.SplitColumn(#"Changed Type", "Column2", Splitter.SplitTextByEachDelimiter({","}, QuoteStyle.Csv, false), {"Column2.1", "Column2.2"}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"Column2.1", type text}, {"Column2.2", type text}}),
    #"Split Column by Delimiter1" = Table.SplitColumn(#"Changed Type1", "Column2.2", Splitter.SplitTextByEachDelimiter({","}, QuoteStyle.Csv, false), {"Column2.2.1", "Column2.2.2"}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Split Column by Delimiter1",{{"Column2.2.1", type text}, {"Column2.2.2", type text}}),
    #"Split Column by Delimiter2" = Table.SplitColumn(#"Changed Type2", "Column2.1", Splitter.SplitTextByDelimiter(":", QuoteStyle.Csv), {"Column2.1.1", "Column2.1.2"}),
    #"Changed Type3" = Table.TransformColumnTypes(#"Split Column by Delimiter2",{{"Column2.1.1", type text}, {"Column2.1.2", type text}}),
    #"Split Column by Delimiter3" = Table.SplitColumn(#"Changed Type3", "Column2.2.1", Splitter.SplitTextByDelimiter(":", QuoteStyle.Csv), {"Column2.2.1.1", "Column2.2.1.2"}),
    #"Changed Type4" = Table.TransformColumnTypes(#"Split Column by Delimiter3",{{"Column2.2.1.1", type text}, {"Column2.2.1.2", type text}}),
    #"Split Column by Delimiter4" = Table.SplitColumn(#"Changed Type4", "Column2.2.2", Splitter.SplitTextByDelimiter(":", QuoteStyle.Csv), {"Column2.2.2.1", "Column2.2.2.2"}),
    #"Changed Type5" = Table.TransformColumnTypes(#"Split Column by Delimiter4",{{"Column2.2.2.1", type text}, {"Column2.2.2.2", type text}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type5",{{"Column1", "Feature"},{"Column2.1.2", "Detected Column Type"}, {"Column2.2.1.2", "Imputation"}, {"Column2.2.2.2", "Transformations"}}),
    #"Removed Columns" = Table.RemoveColumns(#"Renamed Columns",{"Column2.1.1", "Column2.2.1.1", "Column2.2.2.1"}),
    #"Added Conditional Column" = Table.AddColumn(#"Removed Columns", "Details", each if Text.Contains([Detected Column Type], "Categorical") then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if Text.Contains([Detected Column Type], "Numeric") then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if Text.Contains([Detected Column Type], "CategoricalHash") then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if Text.Contains([Detected Column Type], "Text") then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if Text.Contains([Detected Column Type], "DateTime") then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train")
in
    #"Added Conditional Column"</pre></td><td >False</td></tr><tr ><td >ProbabilityDistributionUnpivot</td><td ></td><td >Import</td><td ><pre>let
    Source = Output,
    Distribution = Output[Reports][ScoringDistribution][Slider][data],
    ConvertedTable = Table.FromRows(Distribution, {"Confidence Threshold", "True Positive", "False Positive", "True Negative", "False Negative"}),
    #"Changed Type" = Table.TransformColumnTypes(ConvertedTable, {{"Confidence Threshold", type number}, {"True Positive", Int64.Type}, {"False Positive", Int64.Type}, {"True Negative", Int64.Type}, {"False Negative", Int64.Type}}),
    #"Unpivoted Columns" = Table.UnpivotOtherColumns(#"Changed Type", {"Confidence Threshold"}, "Attribute", "Value"),
    #"Added Conditional Column" = Table.AddColumn(#"Unpivoted Columns", "Actual", each if [Attribute] = "True Positive" then "Actual Win" else if [Attribute] = "False Negative" then "Actual Win" else if [Attribute] = "True Negative" then "Actual Loss" else if [Attribute] = "False Positive" then "Actual Loss" else null),
    #"Renamed Columns1" = Table.RenameColumns(#"Added Conditional Column",{{"Attribute", "Predicted"}})
in
    #"Renamed Columns1"</pre></td><td >False</td></tr><tr ><td >ROC</td><td ></td><td >Import</td><td ><pre>let
    Source = Table.NestedJoin(FPR,{"Index"},TPR,{"Index"},"TPR",JoinKind.Inner),
    #"Expanded TPR" = Table.ExpandTableColumn(Source, "TPR", {"TPR"}, {"TPR.1"}),
    #"Removed Columns" = Table.RemoveColumns(#"Expanded TPR",{"Index"}),
    #"Renamed Columns" = Table.RenameColumns(#"Removed Columns",{{"TPR.1", "TPR"}}),
    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"TPR", type number}, {"FPR", type number}})
in
    #"Changed Type"</pre></td><td >False</td></tr><tr ><td >IterationDetails</td><td ></td><td >Import</td><td ><pre>let
    Source = Output,
    TrainingIterationsNode = Source[TrainingIterations],
    #"Converted to Table" = Table.FromList(TrainingIterationsNode, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"pipeline", "score"}, {"Column1.pipeline", "Column1.score"}),
    #"Extracted Values1" = Table.TransformColumns(#"Expanded Column1", {"Column1.pipeline", each Text.Combine(List.Transform(_, Text.From), ";"), type text}),
    #"Split Column by Delimiter" = Table.SplitColumn(#"Extracted Values1", "Column1.pipeline", Splitter.SplitTextByEachDelimiter({";"}, QuoteStyle.Csv, false), {"Column1.pipeline.1", "Column1.pipeline.2"}),
    #"Changed Type" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"Column1.pipeline.1", type text}, {"Column1.pipeline.2", type text}}),
    #"Added Custom" = Table.AddColumn(#"Changed Type", "Scaler", each [Column1.pipeline.1] & ")"),
    #"Removed Columns" = Table.RemoveColumns(#"Added Custom",{"Column1.pipeline.1"}),
    #"Renamed Columns" = Table.RenameColumns(#"Removed Columns",{{"Column1.score", "Score"}, {"Column1.pipeline.2", "Estimator"}}),
    #"Added Index" = Table.AddIndexColumn(#"Renamed Columns", "Index", 1, 1),
    #"Reordered Columns" = Table.ReorderColumns(#"Added Index",{"Index", "Estimator", "Score", "Scaler"}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Reordered Columns",{{"Score", Percentage.Type}}),
    #"Inserted Text Before Delimiter" = Table.AddColumn(#"Changed Type1", "Text Before Delimiter", each Text.BeforeDelimiter([Estimator], "("), type text),
    #"Renamed Columns1" = Table.RenameColumns(#"Inserted Text Before Delimiter",{{"Text Before Delimiter", "Estimator Name Temp"}}),
    #"Added Conditional Column" = Table.AddColumn(#"Renamed Columns1", "Estimator Name", each if Text.Contains([Estimator], "ExtraTreesClassifier") then "Extra Trees Classifier" else if Text.Contains([Estimator], "LightGBMClassifier") then "Light GBM Classifier" else if Text.Contains([Estimator], "RandomForestClassifier") then "Random Forest Classifier" else if Text.Contains([Estimator], "LogisticRegression") then "Logistic Regression" else if Text.Contains([Estimator], "GradientBoostingClassifier") then "Gradient Boosting Classifier" else if Text.Contains([Estimator], "PreFittedSoftVotingClassifier") then "Pre-fitted Soft Voting Classifier" else [Estimator Name Temp]),
    #"Removed Columns1" = Table.RemoveColumns(#"Added Conditional Column",{"Estimator Name Temp"})
in
    #"Removed Columns1"</pre></td><td >False</td></tr><tr ><td >IterationDetailsMax</td><td ></td><td >Import</td><td ><pre>let
    Source = IterationDetails, 
    MaxScoreRow = Table.Max(Source, "Score"),
    ParameterRowValue = Record.Field(MaxScoreRow, "Estimator"),
    ParameterValues = Text.BetweenDelimiters(ParameterRowValue, "(", ")"),
    ParameterValuesSplit = Text.Split(ParameterValues, ","),
    TableConverted = Table.FromList(ParameterValuesSplit),
    #"Split Column by Delimiter" = Table.SplitColumn(TableConverted, "Column1", Splitter.SplitTextByEachDelimiter({"="}, QuoteStyle.Csv, false), {"Column1.1", "Column1.2"}),
    #"Renamed Columns" = Table.RenameColumns(#"Split Column by Delimiter",{{"Column1.1", "Parameter Name"}, {"Column1.2", "Parameter Value"}})
in
    #"Renamed Columns"</pre></td><td >False</td></tr><tr ><td >EnsembleIterationFullDetails</td><td ></td><td >Import</td><td ><pre>let
    Source = Table.Join(EnsembleWeights, {"Index"}, EnsembleIterations, {"Index"}),
    #"Merged Queries" = Table.NestedJoin(Source,{"Iteration"},EnsembleIterationAlgorithmNames,{"Index"},"EnsembleIterationAlgorithmNames",JoinKind.Inner),
    #"Expanded EnsembleIterationAlgorithmNames" = Table.ExpandTableColumn(#"Merged Queries", "EnsembleIterationAlgorithmNames", {"Index", "Details"}, {"EnsembleIterationAlgorithmNames.Index", "EnsembleIterationAlgorithmNames.Details"}),
    #"Expanded EnsembleIterationAlgorithmNames.Details" = Table.ExpandRecordColumn(#"Expanded EnsembleIterationAlgorithmNames", "EnsembleIterationAlgorithmNames.Details", {"pipeline", "score"}, {"EnsembleIterationAlgorithmNames.Details.pipeline", "EnsembleIterationAlgorithmNames.Details.score"}),
    #"Extracted Values" = Table.TransformColumns(#"Expanded EnsembleIterationAlgorithmNames.Details", {"EnsembleIterationAlgorithmNames.Details.pipeline", each Text.Combine(List.Transform(_, Text.From), "#(tab)"), type text}),
    #"Split Column by Delimiter" = Table.SplitColumn(#"Extracted Values", "EnsembleIterationAlgorithmNames.Details.pipeline", Splitter.SplitTextByDelimiter("#(tab)", QuoteStyle.Csv), {"EnsembleIterationAlgorithmNames.Details.pipeline.1", "EnsembleIterationAlgorithmNames.Details.pipeline.2"}),
    #"Changed Type" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"EnsembleIterationAlgorithmNames.Details.pipeline.1", type text}, {"EnsembleIterationAlgorithmNames.Details.pipeline.2", type text}, {"Weights", Percentage.Type}, {"Iteration", Int64.Type}, {"Index", Int64.Type}, {"EnsembleIterationAlgorithmNames.Index", Int64.Type}, {"EnsembleIterationAlgorithmNames.Details.score", Percentage.Type}}),
    #"Inserted Text Before Delimiter" = Table.AddColumn(#"Changed Type", "Text Before Delimiter", each Text.BeforeDelimiter([EnsembleIterationAlgorithmNames.Details.pipeline.2], "("), type text),
    #"Renamed Columns" = Table.RenameColumns(#"Inserted Text Before Delimiter",{{"Text Before Delimiter", "Algorithm Name"}, {"EnsembleIterationAlgorithmNames.Details.score", "Algorithm Score"}, {"EnsembleIterationAlgorithmNames.Details.pipeline.2", "Algorithm Details"}}),
    #"Duplicated Column" = Table.DuplicateColumn(#"Renamed Columns", "Algorithm Details", "Algorithm Details - Copy"),
    #"Extracted Text Between Delimiters" = Table.TransformColumns(#"Duplicated Column", {{"Algorithm Details - Copy", each Text.BetweenDelimiters(_, "(", ")"), type text}}),
    #"Renamed Columns1" = Table.RenameColumns(#"Extracted Text Between Delimiters",{{"Algorithm Details - Copy", "Algorithm Parameters"}}),
    #"Split Column by Delimiter1" = Table.ExpandListColumn(Table.TransformColumns(#"Renamed Columns1", {{"Algorithm Parameters", Splitter.SplitTextByDelimiter(",", QuoteStyle.None), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "Algorithm Parameters"),
    #"Changed Type1" = Table.TransformColumnTypes(#"Split Column by Delimiter1",{{"Algorithm Parameters", type text}}),
    #"Split Column by Delimiter2" = Table.SplitColumn(#"Changed Type1", "Algorithm Parameters", Splitter.SplitTextByDelimiter("=", QuoteStyle.Csv), {"Algorithm Parameters.1", "Algorithm Parameters.2"}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Split Column by Delimiter2",{{"Algorithm Parameters.1", type text}, {"Algorithm Parameters.2", type text}}),
    #"Renamed Columns2" = Table.RenameColumns(#"Changed Type2",{{"Algorithm Parameters.1", "Algorithm Parameter Name"}, {"Algorithm Parameters.2", "Algorithm Parameter Value"}})
in
    #"Renamed Columns2"</pre></td><td >False</td></tr><tr ><td >IsEnsemble</td><td ></td><td >Import</td><td ><pre>let
    Source = Output,
    EnsembleDetailsRecord = Source[EnsembleDetails],
    
    #"IsEnsemble" =    
        if EnsembleDetailsRecord <> null then
            true
        else
            false
in
    #"IsEnsemble"</pre></td><td >False</td></tr><tr ><td >Selector Table</td><td ></td><td >Import</td><td ><pre>VALUES('SliderValue'[Confidence Threshold])</pre></td><td >False</td></tr><tr ><td >PopulationSize</td><td ></td><td >Import</td><td ><pre>GENERATESERIES(0, 100000, 1)</pre></td><td >False</td></tr><tr ><td >UnitBenefit</td><td ></td><td >Import</td><td ><pre>GENERATESERIES(0, 100000, 1)</pre></td><td >False</td></tr><tr ><td >UnitCost</td><td ></td><td >Import</td><td ><pre>GENERATESERIES(0, 100000, 1)</pre></td><td >False</td></tr><tr ><td >KeyInfluencers_TopPredictors</td><td ></td><td >Import</td><td ><pre>let
    Source = Output,
    KeyInfluencers1 = Output[KeyInfluencers],
    TopPredictors1 = Table.FromRows(KeyInfluencers1[TopPredictors], {"Feature Name", "Feature Type", "Feature Importance"}),
    #"Changed Type" = Table.TransformColumnTypes(TopPredictors1,{{"Feature Importance", type number}})
in
    #"Changed Type"</pre></td><td >False</td></tr><tr ><td >KeyInfluencers_Breakdowns</td><td ></td><td >Import</td><td ><pre>let
    Source = Output,
    KeyInfluencers1 = Output[KeyInfluencers],
    PredictorBreakdowns1 = Table.FromRows(KeyInfluencers1[PredictorBreakdowns], {"Feature Name", "Bin", "% of Positive Outcome"}),
    #"Changed Type" = Table.TransformColumnTypes(PredictorBreakdowns1,{{"% of Positive Outcome", type number}}),
    #"Filtered Rows" = Table.SelectRows(#"Changed Type", each [#"% of Positive Outcome"] <> 0)
in
    #"Filtered Rows"</pre></td><td >False</td></tr></table><hr></hr><br></br><h3><div>List of Measures:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Measure Name</th>
		<th>Table Name</th>
		<th>Description</th>
		<th>Expression</th>
		<th>Dependency</th>
		<th>Reverse Dependency</th>
	</tr>
	<tr>
		<td>10KScenarioStatement</td>
		<td>Output</td>
		<td></td>
		<td><pre>"If applied to 10,000 records with the same distribution of " & Parameters[TrueLabel] & " and " & Parameters[FalseLabel] & " records as your input data, this model will yield the below predictions."</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KScenarioStatement</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: FalseLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KScenarioStatement</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>10KPrecisionStatement</td>
		<td>Output</td>
		<td></td>
		<td><pre>"This model will predict " & FORMAT([10KPredictedWins], "0") & " records as " & Parameters[TrueLabel] & " records, of which " & FORMAT([10KTruePositiveWins], "0") & " will be actual " & Parameters[TrueLabel]& " records."</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KPrecisionStatement</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: 10KPredictedWins (Table: Output)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li><span class="caret">Measure: 10KTruePositiveWins (Table: Output)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KPrecisionStatement</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>10KRecallStatement</td>
		<td>Output</td>
		<td></td>
		<td><pre>"There will be " & FORMAT([10KActualWins], "0") & " actual " & Parameters[TrueLabel] & " records in your data, of which this model will correctly predict " & FORMAT([10KTruePositiveWins], "0") & " as " & Parameters[TrueLabel] & " records."</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KRecallStatement</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: 10KActualWins (Table: Output)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li><span class="caret">Measure: 10KTruePositiveWins (Table: Output)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KRecallStatement</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>10KActualWins</td>
		<td>Output</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    VAR TrueP = CALCULATE(AVERAGE(ProbabilityDistribution[TP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR TrueN = CALCULATE(AVERAGE(ProbabilityDistribution[TN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR FalseP = CALCULATE(AVERAGE(ProbabilityDistribution[FP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR FalseN = CALCULATE(AVERAGE(ProbabilityDistribution[FN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    return (TrueP + FalseN) * 10000 / (TrueP + FalseN + TrueN + FalseP)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KActualWins</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KActualWins</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Measure: 10KRecallStatement</span>
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>10KPredictedWins</td>
		<td>Output</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    VAR TrueP = CALCULATE(AVERAGE(ProbabilityDistribution[TP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR TrueN = CALCULATE(AVERAGE(ProbabilityDistribution[TN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR FalseP = CALCULATE(AVERAGE(ProbabilityDistribution[FP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR FalseN = CALCULATE(AVERAGE(ProbabilityDistribution[FN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    return (TrueP + FalseP) * 10000 / (TrueP + FalseN + TrueN + FalseP)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KPredictedWins</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KPredictedWins</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Measure: 10KPrecisionStatement</span>
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>10KTruePositiveWins</td>
		<td>Output</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    VAR TrueP = CALCULATE(AVERAGE(ProbabilityDistribution[TP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR TrueN = CALCULATE(AVERAGE(ProbabilityDistribution[TN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR FalseP = CALCULATE(AVERAGE(ProbabilityDistribution[FP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR FalseN = CALCULATE(AVERAGE(ProbabilityDistribution[FN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    return (TrueP) * 10000 / (TrueP + FalseN + TrueN + FalseP)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KTruePositiveWins</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: 10KTruePositiveWins</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Measure: 10KPrecisionStatement</span>
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></li>
<li><span class="caret">Measure: 10KRecallStatement</span>
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>PrecisionSubtext</td>
		<td>Output</td>
		<td></td>
		<td><pre>"of records predicted as " & Parameters[TrueLabel] & " are likely to actually be " & Parameters[TrueLabel] </pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: PrecisionSubtext</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: PrecisionSubtext</td>
	</tr>
	<tr>
		<td>RecallSubtext</td>
		<td>Output</td>
		<td></td>
		<td><pre>"of records that are actually " & Parameters[TrueLabel] & " are likely to be predicted as " & Parameters[TrueLabel]</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: RecallSubtext</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: RecallSubtext</td>
	</tr>
	<tr>
		<td>PositivePredictorHeading</td>
		<td>Output</td>
		<td></td>
		<td><pre>"Top predictors by influence" </pre></td>
		<td>Measure: PositivePredictorHeading</td>
		<td>Measure: PositivePredictorHeading</td>
	</tr>
	<tr>
		<td>PositivePredictorBreakdownHeader</td>
		<td>Output</td>
		<td></td>
		<td><pre>IF(SELECTEDVALUE(PositivePredictor[Predictor], FALSE()) = FALSE(), "[Click on a predictor to see outcome breakdown]", 
    SELECTEDVALUE(PositivePredictor[Predictor], BLANK()) & " breakdown")</pre></td>
		<td>Measure: PositivePredictorBreakdownHeader</td>
		<td>Measure: PositivePredictorBreakdownHeader</td>
	</tr>
	<tr>
		<td>Area under ROC curve</td>
		<td>Output</td>
		<td></td>
		<td><pre>CALCULATE(SELECTEDVALUE(Output[Value]), Output[Name] = "TrainingAUC") * 1</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Area under ROC curve</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Output</li>
<li>Column: Name (Table: Output)</li>
<li>Column: Value (Table: Output)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Area under ROC curve</td>
	</tr>
	<tr>
		<td>Input row count</td>
		<td>Output</td>
		<td></td>
		<td><pre>CALCULATE(SELECTEDVALUE(Output[Value]), Output[Name] = "TotalDataSize") * 1</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Input row count</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Output</li>
<li>Column: Name (Table: Output)</li>
<li>Column: Value (Table: Output)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Input row count</td>
	</tr>
	<tr>
		<td>Sampled row count</td>
		<td>Output</td>
		<td></td>
		<td><pre>Output[Training row count] + Output[Validation row count] </pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Sampled row count</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Output</li>
<li><span class="caret">Measure: Training row count (Table: Output)</span>
<ul class="nested">
<li>Table: Output   ...</li>
<li>Column: Name (Table: Output)</li>
<li>Column: Value (Table: Output)</li>
</ul></li>
<li><span class="caret">Measure: Validation row count (Table: Output)</span>
<ul class="nested">
<li>Table: Output   ...</li>
<li>Column: Name (Table: Output)</li>
<li>Column: Value (Table: Output)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: Sampled row count</td>
	</tr>
	<tr>
		<td>Training row count</td>
		<td>Output</td>
		<td></td>
		<td><pre>CALCULATE(SELECTEDVALUE(Output[Value]), Output[Name] = "TrainingSize") * 1  </pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Training row count</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Output</li>
<li>Column: Name (Table: Output)</li>
<li>Column: Value (Table: Output)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Training row count</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: Sampled row count</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>Validation row count</td>
		<td>Output</td>
		<td></td>
		<td><pre>CALCULATE(SELECTEDVALUE(Output[Value]), Output[Name] = "TestingSize") * 1  </pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Validation row count</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Output</li>
<li>Column: Name (Table: Output)</li>
<li>Column: Value (Table: Output)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Validation row count</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: Sampled row count</li>
<li>Measure: ModelTested</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>ModelTested</td>
		<td>Output</td>
		<td></td>
		<td><pre>"The model predicted "& Parameters[LabelColumnName] & " probabilities for a test set of " & Output[Validation row count] & " records and compared the predicted outcomes (based on the selected threshold) to the historical outcomes." </pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: ModelTested</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Output</li>
<li>Table: Parameters</li>
<li><span class="caret">Measure: Validation row count (Table: Output)</span>
<ul class="nested">
<li>Table: Output   ...</li>
<li>Column: Name (Table: Output)</li>
<li>Column: Value (Table: Output)</li>
</ul></li>
<li><span class="caret">Measure: LabelColumnName (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: ModelTested</td>
	</tr>
	<tr>
		<td>TrainingSubtitleThreshold</td>
		<td>Output</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    return "At your selected confidence threshold of " & selectedValue</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: TrainingSubtitleThreshold</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
</ul></span></li>
</ul></td>
		<td>Measure: TrainingSubtitleThreshold</td>
	</tr>
	<tr>
		<td>Benefit Analysis Title</td>
		<td>Output</td>
		<td></td>
		<td><pre>Parameters[TrueLabel] & " in your data"</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Benefit Analysis Title</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: Benefit Analysis Title</td>
	</tr>
	<tr>
		<td>Cost Analysis Title</td>
		<td>Output</td>
		<td></td>
		<td><pre>Parameters[FalseLabel] & " in your data"</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Cost Analysis Title</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: FalseLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: Cost Analysis Title</td>
	</tr>
	<tr>
		<td>Numbe Of Iterations</td>
		<td>Output</td>
		<td></td>
		<td><pre>CALCULATE(SELECTEDVALUE(Output[Value]), Output[Name] = "NumberOfIterations") * 1</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Numbe Of Iterations</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Output</li>
<li>Column: Name (Table: Output)</li>
<li>Column: Value (Table: Output)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Numbe Of Iterations</td>
	</tr>
	<tr>
		<td>Pipeline Steps</td>
		<td>Output</td>
		<td></td>
		<td><pre>CALCULATE(SELECTEDVALUE(Output[Value]), Output[Name] = "PipelineStepsString")</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Pipeline Steps</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Output</li>
<li>Column: Name (Table: Output)</li>
<li>Column: Value (Table: Output)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Pipeline Steps</td>
	</tr>
	<tr>
		<td>Model Accuracy</td>
		<td>Output</td>
		<td></td>
		<td><pre>"The likely accuracy of predictions generated by your machine learning model can be interpreted using a Cumulative Gains chart and the Receiver Operating Characteristics (ROC) curve." </pre></td>
		<td>Measure: Model Accuracy</td>
		<td>Measure: Model Accuracy</td>
	</tr>
	<tr>
		<td>ModelTraining</td>
		<td>Output</td>
		<td></td>
		<td><pre>"Power BI used the automated ML capability in Azure Machine Learning to train your model. Automated ML was used to find the best way to prepare your data, determine the algorithms used and select the algorithm parameters likely to yield the best accuracy. These steps were used in the machine learning pipeline which generated your machine learning model."</pre></td>
		<td>Measure: ModelTraining</td>
		<td>Measure: ModelTraining</td>
	</tr>
	<tr>
		<td>Final Model Quality</td>
		<td>Output</td>
		<td></td>
		<td><pre>MAX(IterationDetails[Score])</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Final Model Quality</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: IterationDetails</li>
<li>Column: Score (Table: IterationDetails)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Final Model Quality</td>
	</tr>
	<tr>
		<td>ModelParametersTitle</td>
		<td>Output</td>
		<td></td>
		<td><pre>[Algorithm Selected] & " final parameters selected"</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: ModelParametersTitle</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Measure: Algorithm Selected (Table: IterationDetails)</span>
<ul class="nested">
<li>Table: IterationDetails   ...</li>
<li>Column: Score (Table: IterationDetails)</li>
<li>Column: Estimator Name (Table: IterationDetails)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: ModelParametersTitle</td>
	</tr>
	<tr>
		<td>InterpretResultsDynamicText</td>
		<td>Output</td>
		<td></td>
		<td><pre>"As a result of the comparison, we have 4 bins:  True Positives, False Positives, True Negatives and False Negatives." & UNICHAR(10) & UNICHAR(10) & "True Positives and True Negatives are correctly predicted " & Parameters[TrueLabel] & " and " & Parameters[FalseLabel] & " events, respectively.  False Positives are observations where a " & Parameters[FalseLabel] & " was predicted as a " & Parameters[TrueLabel] & ".  Conversely, False Negatives are observations where a " & Parameters[TrueLabel] & " was predicted as a " & Parameters[FalseLabel] & "."  & UNICHAR(10) & UNICHAR(10) & " Note, the probability threshold used to classify a prediction as a " & Parameters[TrueLabel] & " or a " & Parameters[FalseLabel] & " affects these values." </pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: InterpretResultsDynamicText</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: FalseLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: InterpretResultsDynamicText</td>
	</tr>
	<tr>
		<td>DecideApplyDynamicText</td>
		<td>Output</td>
		<td></td>
		<td><pre>"The model scores every record with a probability of " & Parameters[TrueLabel] & " ranging from 0 to 1.  You can decide the threshold above which an observation is predicted as a "& Parameters[TrueLabel] & ". Increasing the threshold will result in fewer false positives (higher precision). Decreasing it will result in fewer false negatives (higher recall)." & UNICHAR(10) & UNICHAR(10) &
" High recall causes the model to be liberal when labelling outcomes as " & Parameters[TrueLabel] & " ,to ensure that you don’t miss any. This means some " & Parameters[FalseLabel] & " will slip through the cracks into this category. Whereas, high precision causes the model to label outcomes as " & Parameters[TrueLabel] & " when confidence is high, to minimize mislabeling. This means some " & Parameters[TrueLabel] & " will be missed."</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: DecideApplyDynamicText</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: FalseLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: DecideApplyDynamicText</td>
	</tr>
	<tr>
		<td>MatrixPredictedTrue</td>
		<td>Output</td>
		<td></td>
		<td><pre>"Predicted " & Parameters[TrueLabel]</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: MatrixPredictedTrue</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: MatrixPredictedTrue</td>
	</tr>
	<tr>
		<td>MatrixPredictedFalse</td>
		<td>Output</td>
		<td></td>
		<td><pre>"Predicted " & Parameters[FalseLabel]</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: MatrixPredictedFalse</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: FalseLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: MatrixPredictedFalse</td>
	</tr>
	<tr>
		<td>MatrixActualTrue</td>
		<td>Output</td>
		<td></td>
		<td><pre>"Actual " & Parameters[TrueLabel]</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: MatrixActualTrue</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: MatrixActualTrue</td>
	</tr>
	<tr>
		<td>MatrixActualFalse</td>
		<td>Output</td>
		<td></td>
		<td><pre>"Actual " & Parameters[FalseLabel]</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: MatrixActualFalse</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: FalseLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: MatrixActualFalse</td>
	</tr>
	<tr>
		<td>Precision recall text</td>
		<td>Output</td>
		<td></td>
		<td><pre>"Given all records that were predicted as " & Parameters[TrueLabel] & ", precision refers to how many of those records were correctly predicted. On the other hand, out of all records that are actually " & Parameters[TrueLabel] & ", recall refers to how many of them were correctly predicted."</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Precision recall text</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Precision recall text</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>Precision and recall</td>
		<td>Output</td>
		<td></td>
		<td><pre>[Precision recall text] & UNICHAR(10) & UNICHAR(10) & [10KScenarioStatement] & UNICHAR(10) & UNICHAR(10) & [10KPrecisionStatement] & UNICHAR(10) & UNICHAR(10) & [10KRecallStatement]</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Precision and recall</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Measure: 10KScenarioStatement (Table: Output)</span>
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: FalseLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></li>
<li><span class="caret">Measure: 10KPrecisionStatement (Table: Output)</span>
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: 10KPredictedWins (Table: Output)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li><span class="caret">Measure: 10KTruePositiveWins (Table: Output)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></li>
<li><span class="caret">Measure: 10KRecallStatement (Table: Output)</span>
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: 10KActualWins (Table: Output)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li><span class="caret">Measure: 10KTruePositiveWins (Table: Output)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></li>
<li><span class="caret">Measure: Precision recall text (Table: Output)</span>
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: Precision and recall</td>
	</tr>
	<tr>
		<td>False Negative</td>
		<td>PositiveDistribution</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    VAR filteredSum = IF( MIN(PositiveDistribution[Confidence]) <= selectedValue, Max(PositiveDistribution[Count]), BLANK() )
    return filteredSum</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: False Negative</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: PositiveDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence (Table: PositiveDistribution)</li>
<li>Column: Count (Table: PositiveDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: False Negative</td>
	</tr>
	<tr>
		<td>True Positive</td>
		<td>PositiveDistribution</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    VAR filteredSum = IF( MIN(PositiveDistribution[Confidence]) < selectedValue, BLANK(), Max(PositiveDistribution[Count]) )
    return filteredSum</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: True Positive</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: PositiveDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence (Table: PositiveDistribution)</li>
<li>Column: Count (Table: PositiveDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: True Positive</td>
	</tr>
	<tr>
		<td>False Positive</td>
		<td>NegativeDistribution</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    VAR filteredSum = IF( MIN(NegativeDistribution[Confidence]) >= selectedValue - 0.01, Max(NegativeDistribution[Count]), BLANK() )
    return filteredSum</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: False Positive</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: NegativeDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence (Table: NegativeDistribution)</li>
<li>Column: Count (Table: NegativeDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: False Positive</td>
	</tr>
	<tr>
		<td>True Negative</td>
		<td>NegativeDistribution</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    VAR filteredSum = IF( MIN(NegativeDistribution[Confidence]) <= selectedValue , Max(NegativeDistribution[Count]), BLANK() )
    return filteredSum</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: True Negative</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: NegativeDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence (Table: NegativeDistribution)</li>
<li>Column: Count (Table: NegativeDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: True Negative</td>
	</tr>
	<tr>
		<td>Precision</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    return CALCULATE(AVERAGE(ProbabilityDistribution[Precision Check]), ProbabilityDistribution[Confidence Threshold] = selectedValue)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Precision</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li><span class="caret">Calc_Column: Precision Check (Table: ProbabilityDistribution)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution   ...</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Precision</td>
	</tr>
	<tr>
		<td>Recall</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    return CALCULATE(AVERAGE(ProbabilityDistribution[Recall Check]), ProbabilityDistribution[Confidence Threshold] = selectedValue)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Recall</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li><span class="caret">Calc_Column: Recall Check (Table: ProbabilityDistribution)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution   ...</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Recall</td>
	</tr>
	<tr>
		<td>Selectivity</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    return CALCULATE(AVERAGE(ProbabilityDistribution[Selectivity Check]), ProbabilityDistribution[Confidence Threshold] = selectedValue)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Selectivity</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li><span class="caret">Calc_Column: Selectivity Check (Table: ProbabilityDistribution)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution   ...</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Selectivity</td>
	</tr>
	<tr>
		<td>Accuracy</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    return CALCULATE(AVERAGE(ProbabilityDistribution[Accuracy Check]), ProbabilityDistribution[Confidence Threshold] = selectedValue)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Accuracy</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li><span class="caret">Calc_Column: Accuracy Check (Table: ProbabilityDistribution)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution   ...</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Accuracy</td>
	</tr>
	<tr>
		<td>IdealModel</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>CALCULATE(
    MIN(1.0, (MAX([TP])+MAX([FP]))/(MAX([TP])+MIN([FN]))), 
    FILTER(
        ALL('ProbabilityDistribution'),
        'ProbabilityDistribution'[Confidence Threshold] >= MIN('ProbabilityDistribution'[Confidence Threshold])
    )
)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: IdealModel</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: IdealModel</td>
	</tr>
	<tr>
		<td>Model</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>CALCULATE(
    MAX([TP])/(MAX([TP])+MIN([FN])), 
    FILTER(
        ALL('ProbabilityDistribution'),
         'ProbabilityDistribution'[Confidence Threshold] >= MIN('ProbabilityDistribution'[Confidence Threshold])
    )
)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Model</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Model</td>
	</tr>
	<tr>
		<td>Random guess</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>
    MAX('ProbabilityDistribution'[Population])</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Random guess</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Population (Table: ProbabilityDistribution)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Random guess</td>
	</tr>
	<tr>
		<td>Profit</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>MAXX(
    ProbabilityDistribution,
    (([TP] * MAX(UnitBenefit[UnitBenefit])) - (([TP] + [FP]) * MAX(UnitCost[UnitCost]))) * (MAX(PopulationSize[PopulationSize]) / ([TP] + [FP] + [TN] + [FN]))
)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Profit</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Column: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Profit</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: TargetThreshold</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>Cost</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>MAXX(
    ProbabilityDistribution,
    (([TP] + [FP]) * MAX(UnitCost[UnitCost])) * (MAX(PopulationSize[PopulationSize]) / ([TP] + [FP] + [TN] + [FN]))
)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Cost</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Cost</td>
	</tr>
	<tr>
		<td>MaxProfit</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>MAXX(
    ALL(SliderValue[Confidence Threshold]),
    MAXX(
        ProbabilityDistribution,
        IF(
            [Confidence Threshold] >= SliderValue[Confidence Threshold], 
            ([TP] * MAX(UnitBenefit[UnitBenefit]) - (([TP] + [FP]) * MAX(UnitCost[UnitCost]))) * (MAX(PopulationSize[PopulationSize]) / ([TP] + [FP] + [TN] + [FN])),
            BLANK()
        )
    )
)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: MaxProfit</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Column: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: MaxProfit</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: TargetThreshold</li>
<li>Measure: CostBenefitAnalysis</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>TargetThreshold</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>CALCULATE(SELECTEDVALUE(ProbabilityDistribution[Confidence Threshold]), FILTER(ProbabilityDistribution,[Profit] = [MaxProfit]) )</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: TargetThreshold</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li><span class="caret">Measure: Profit (Table: ProbabilityDistribution)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution   ...</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Column: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
</ul></li>
<li><span class="caret">Measure: MaxProfit (Table: ProbabilityDistribution)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution   ...</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution   ...</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Column: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: TargetThreshold</td>
	</tr>
	<tr>
		<td>ThresholdForMaxProfit</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>
VAR ThresholdAndProfit = ADDCOLUMNS(
    ProbabilityDistribution,
    "MaxProfit",
    ([TP] * MAX(UnitBenefit[UnitBenefit]) - (([TP] + [FP]) * MAX(UnitCost[UnitCost]))) * (MAX(PopulationSize[PopulationSize]) / ([TP] + [FP] + [TN] + [FN]))
)
RETURN MINX(TOPN(1, ThresholdAndProfit, [MaxProfit], DESC), [Confidence Threshold])</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: ThresholdForMaxProfit</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Column: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: ThresholdForMaxProfit</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: CostBenefitAnalysis</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>PopulationPercentageForMaxProfit</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>
VAR PopulationPercentageAndProfit = ADDCOLUMNS(
    ProbabilityDistribution,
    "MaxProfit2",
    ([TP] * MAX(UnitBenefit[UnitBenefit]) - (([TP] + [FP]) * MAX(UnitCost[UnitCost]))) * (MAX(PopulationSize[PopulationSize]) / ([TP] + [FP] + [TN] + [FN]))
)
RETURN MINX(TOPN(1, PopulationPercentageAndProfit, [MaxProfit2], DESC), [Population])</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: PopulationPercentageForMaxProfit</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Population (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Column: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: PopulationPercentageForMaxProfit</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: CostBenefitAnalysis</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>CostBenefitAnalysis</td>
		<td>ProbabilityDistribution</td>
		<td></td>
		<td><pre>
    "Given a population size of " &
    MAX(PopulationSize[PopulationSize]) &
    ", a unit benefit of " &
    MAX(UnitBenefit[UnitBenefit]) &
    ", and a unit cost of " &
    MAX(UnitCost[UnitCost]) &
    ", the maximum profit that can be achieved is " &
    ROUND([MaxProfit], 2) &
    ". The minimum probability threshold required for maximum profit is " &
    [ThresholdForMaxProfit] &
    " and the percentage of the population to target at that level is " &
    ROUND([PopulationPercentageForMaxProfit] * 100, 2) &
    "%."</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: CostBenefitAnalysis</span><span class="dropDownCaret">
<ul class="nested">
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Column: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
<li><span class="caret">Measure: MaxProfit (Table: ProbabilityDistribution)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution   ...</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistribution   ...</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Column: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
</ul></li>
<li><span class="caret">Measure: ThresholdForMaxProfit (Table: ProbabilityDistribution)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution   ...</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Column: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
</ul></li>
<li><span class="caret">Measure: PopulationPercentageForMaxProfit (Table: ProbabilityDistribution)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution   ...</li>
<li>Column: Population (Table: ProbabilityDistribution)</li>
<li>Column: TP (Table: ProbabilityDistribution)</li>
<li>Column: FP (Table: ProbabilityDistribution)</li>
<li>Column: TN (Table: ProbabilityDistribution)</li>
<li>Column: FN (Table: ProbabilityDistribution)</li>
<li>Calc_Table: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Column: PopulationSize (Table: PopulationSize)</li>
<li>Calc_Table: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Column: UnitBenefit (Table: UnitBenefit)</li>
<li>Calc_Table: UnitCost (Table: UnitCost)</li>
<li>Calc_Column: UnitCost (Table: UnitCost)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: CostBenefitAnalysis</td>
	</tr>
	<tr>
		<td>FalseLabel</td>
		<td>Parameters</td>
		<td></td>
		<td><pre>CALCULATE(SELECTEDVALUE(Parameters[ParameterValue]), Parameters[ParameterName] = "FalseLabel")</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: FalseLabel</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: FalseLabel</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Measure: 10KScenarioStatement</span>
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></li>
<li>Measure: Cost Analysis Title</li>
<li>Measure: InterpretResultsDynamicText</li>
<li>Measure: DecideApplyDynamicText</li>
<li>Measure: MatrixPredictedFalse</li>
<li>Measure: MatrixActualFalse</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>TrueLabel</td>
		<td>Parameters</td>
		<td></td>
		<td><pre>CALCULATE(SELECTEDVALUE(Parameters[ParameterValue]), Parameters[ParameterName] = "TrueLabel")</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: TrueLabel</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: TrueLabel</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Measure: 10KScenarioStatement</span>
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></li>
<li><span class="caret">Measure: 10KPrecisionStatement</span>
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></li>
<li><span class="caret">Measure: 10KRecallStatement</span>
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></li>
<li>Measure: PrecisionSubtext</li>
<li>Measure: RecallSubtext</li>
<li>Measure: Benefit Analysis Title</li>
<li>Measure: InterpretResultsDynamicText</li>
<li>Measure: DecideApplyDynamicText</li>
<li>Measure: MatrixPredictedTrue</li>
<li>Measure: MatrixActualTrue</li>
<li>Measure: Chart title</li>
<li><span class="caret">Measure: Precision recall text</span>
<ul class="nested">
<li>Measure: Precision and recall</li>
</ul></li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>LabelColumnName</td>
		<td>Parameters</td>
		<td></td>
		<td><pre>CALCULATE(SELECTEDVALUE(Parameters[ParameterValue]), Parameters[ParameterName] = "LabelColumnName")</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: LabelColumnName</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: LabelColumnName</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: ModelTested</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>OutcomeDistributionValue</td>
		<td>ProbabilityDistributionUnpivot</td>
		<td></td>
		<td><pre>
    VAR selectedValue = ROUND(MAX(SliderValue[Confidence Threshold]), 2)
    return CALCULATE(AVERAGE(ProbabilityDistributionUnpivot[Value]), ProbabilityDistributionUnpivot[Confidence Threshold] = selectedValue)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: OutcomeDistributionValue</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Table: ProbabilityDistributionUnpivot</li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
<li>Column: Value (Table: ProbabilityDistributionUnpivot)</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistributionUnpivot)</li>
</ul></span></li>
</ul></td>
		<td>Measure: OutcomeDistributionValue</td>
	</tr>
	<tr>
		<td>ModelROC</td>
		<td>ROC</td>
		<td></td>
		<td><pre>MIN([TPR]) </pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: ModelROC</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Column: TPR (Table: ROC)</span>
<ul class="nested">
<li><span class="caret">Partition: Output-653d8e1f-4391-4d7e-b28c-6b56ce7ba792 (Table: Output)</span>
<ul class="nested">
<li>Partition: WorkspaceId-728c44e4-03fa-4c68-9c24-2e2ba3bf88f9 (Table: WorkspaceId)</li>
<li>Partition: DataflowId-d5ae254e-4cad-4a82-9820-fdec785c96f6 (Table: DataflowId)</li>
<li>Partition: EntityName-274b6df6-1365-40c2-80c3-2630095f051a (Table: EntityName)</li>
</ul></li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: ModelROC</td>
	</tr>
	<tr>
		<td>Algorithm Selected</td>
		<td>IterationDetails</td>
		<td></td>
		<td><pre>CALCULATE(
    FIRSTNONBLANK('IterationDetails'[Estimator Name],'IterationDetails'[Estimator Name]),
    FILTER(
        ALL('IterationDetails'),
        'IterationDetails'[Score]=MAX('IterationDetails'[Score])
    )
)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Algorithm Selected</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: IterationDetails</li>
<li>Column: Score (Table: IterationDetails)</li>
<li>Column: Estimator Name (Table: IterationDetails)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Algorithm Selected</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: ModelParametersTitle</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>Final Algorithm Selected</td>
		<td>IterationDetails</td>
		<td></td>
		<td><pre>CALCULATE(
    FIRSTNONBLANK('IterationDetails'[Estimator Name],'IterationDetails'[Estimator Name]),
    FILTER(
        ALL('IterationDetails'),
        'IterationDetails'[Score]=MAX('IterationDetails'[Score])
    )
)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Final Algorithm Selected</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: IterationDetails</li>
<li>Column: Score (Table: IterationDetails)</li>
<li>Column: Estimator Name (Table: IterationDetails)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Final Algorithm Selected</td>
	</tr>
	<tr>
		<td>AlgorithmParamValue</td>
		<td>EnsembleIterationFullDetails</td>
		<td></td>
		<td><pre>IF(HASONEFILTER(EnsembleIterationFullDetails[AlgorithmKey]) && HASONEFILTER(EnsembleIterationFullDetails[Algorithm Parameter Name]),VALUES(EnsembleIterationFullDetails[Algorithm Parameter Value]), BLANK())</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: AlgorithmParamValue</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: EnsembleIterationFullDetails</li>
<li>Column: Algorithm Parameter Name (Table: EnsembleIterationFullDetails)</li>
<li>Column: Algorithm Parameter Value (Table: EnsembleIterationFullDetails)</li>
<li><span class="caret">Calc_Column: AlgorithmKey (Table: EnsembleIterationFullDetails)</span>
<ul class="nested">
<li>Table: EnsembleIterationFullDetails   ...</li>
<li>Column: Iteration (Table: EnsembleIterationFullDetails)</li>
<li>Column: Algorithm Name (Table: EnsembleIterationFullDetails)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: AlgorithmParamValue</td>
	</tr>
	<tr>
		<td>Measure</td>
		<td>IsEnsemble</td>
		<td></td>
		<td><pre>if(COUNTAX(FILTER('IsEnsemble', 'IsEnsemble'[IsEnsemble]=TRUE()), [IsEnsemble]) > 0, TRUE(), FALSE())</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Measure</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: IsEnsemble</li>
<li>Column: IsEnsemble (Table: IsEnsemble)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Measure</td>
	</tr>
	<tr>
		<td>selected</td>
		<td>Selector Table</td>
		<td></td>
		<td><pre>IF(HASONEVALUE('Selector Table'[Confidence Threshold]),VALUES('Selector Table'[Confidence Threshold]),BLANK())</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: selected</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Calc_Table: Selector Table (Table: Selector Table)</span>
<ul class="nested">
<li><span class="caret">Calc_Table: SliderValue (Table: SliderValue)</span>
<ul class="nested">
<li>Table: ProbabilityDistribution</li>
<li>Column: Confidence Threshold (Table: ProbabilityDistribution)</li>
</ul></li>
<li>Calc_Column: Confidence Threshold (Table: SliderValue)</li>
</ul></li>
<li>Calc_Column: Confidence Threshold (Table: Selector Table)</li>
</ul></span></li>
</ul></td>
		<td>Measure: selected</td>
	</tr>
	<tr>
		<td>IsTopPredictorSelected</td>
		<td>KeyInfluencers_Breakdowns</td>
		<td></td>
		<td><pre>IF(ISFILTERED(KeyInfluencers_TopPredictors[Feature Name]), 1, 2)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: IsTopPredictorSelected</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: KeyInfluencers_TopPredictors</li>
<li>Column: Feature Name (Table: KeyInfluencers_TopPredictors)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: IsTopPredictorSelected</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: Chart title</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>Chart title</td>
		<td>KeyInfluencers_Breakdowns</td>
		<td></td>
		<td><pre>IF(KeyInfluencers_Breakdowns[IsTopPredictorSelected] = 1, "Percentage of " & Parameters[TrueLabel]  & " records for each feature value" , "Select a predictor on the left to see its breakdown")</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Chart title</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: Parameters</li>
<li><span class="caret">Measure: TrueLabel (Table: Parameters)</span>
<ul class="nested">
<li>Table: Parameters   ...</li>
<li>Column: ParameterName (Table: Parameters)</li>
<li>Column: ParameterValue (Table: Parameters)</li>
</ul></li>
<li>Table: KeyInfluencers_Breakdowns</li>
<li><span class="caret">Measure: IsTopPredictorSelected (Table: KeyInfluencers_Breakdowns)</span>
<ul class="nested">
<li>Table: KeyInfluencers_TopPredictors</li>
<li>Column: Feature Name (Table: KeyInfluencers_TopPredictors)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: Chart title</td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table SliderValue:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Confidence Threshold</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table Distribution:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Actual</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Predicted</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Count1</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table DataTableDistribution:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Actual</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Predicted</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Counts</td>
		<td></td>
		<td>Calculated Column</td>
		<td>
    VAR selectedValue = MAX(SliderValue[Confidence Threshold])
    VAR TrueP = CALCULATE(AVERAGE(ProbabilityDistribution[TP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR TrueN = CALCULATE(AVERAGE(ProbabilityDistribution[TN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR FalseP = CALCULATE(AVERAGE(ProbabilityDistribution[FP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR FalseN = CALCULATE(AVERAGE(ProbabilityDistribution[FN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)
    VAR c = IF((DataTableDistribution[Actual] = &quot;Actual Win&quot; &amp;&amp; DataTableDistribution[Predicted] = &quot;True Positive&quot;), TrueP,
        IF((DataTableDistribution[Actual] = &quot;Actual Win&quot; &amp;&amp; DataTableDistribution[Predicted] = &quot;False Negative&quot;), FalseN,
        IF((DataTableDistribution[Actual] = &quot;Actual Loss&quot; &amp;&amp; DataTableDistribution[Predicted] = &quot;True Negative&quot;), TrueN,
        IF((DataTableDistribution[Actual] = &quot;Actual Loss&quot; &amp;&amp; DataTableDistribution[Predicted] = &quot;False Positive&quot;), FalseP, BLANK()))))
return c</td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table Output:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Name</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Value</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table PositiveDistribution:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Confidence</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Count</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table NegativeDistribution:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Confidence</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Count</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table ProbabilityDistribution:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Precision Check</td>
		<td></td>
		<td>Calculated Column</td>
		<td>
VAR denominator = IF((ProbabilityDistribution[TP] + ProbabilityDistribution[FP]) = 0, 1,(ProbabilityDistribution[TP] + ProbabilityDistribution[FP])) 
return ProbabilityDistribution[TP]/(denominator) </td>
	</tr>
	<tr>
		<td>Recall Check</td>
		<td></td>
		<td>Calculated Column</td>
		<td>
VAR denominator = IF((ProbabilityDistribution[FN] + ProbabilityDistribution[TP]) = 0, 1,(ProbabilityDistribution[FN] + ProbabilityDistribution[TP])) 
return ProbabilityDistribution[TP]/(denominator) </td>
	</tr>
	<tr>
		<td>Selectivity Check</td>
		<td></td>
		<td>Calculated Column</td>
		<td>(ProbabilityDistribution[TP]+ProbabilityDistribution[FP])/(ProbabilityDistribution[TP]+ProbabilityDistribution[FP]+ProbabilityDistribution[TN]+ProbabilityDistribution[FN])</td>
	</tr>
	<tr>
		<td>Accuracy Check</td>
		<td></td>
		<td>Calculated Column</td>
		<td>(ProbabilityDistribution[TP] + ProbabilityDistribution[TN]) / (ProbabilityDistribution[TP] + ProbabilityDistribution[TN] + ProbabilityDistribution[FP] + ProbabilityDistribution[FN])</td>
	</tr>
	<tr>
		<td>Population</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Confidence Threshold</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>TP</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>FP</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>TN</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>FN</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table LabelForTrueOutcomes:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>LabelForTrueOutcomes</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table LabelForFalseOutcomes:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>LabelForFalseOutcomes</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table Parameters:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ParameterName</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>ParameterValue</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table WorkspaceId:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>WorkspaceId</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table DataflowId:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>DataflowId</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table EntityName:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>EntityName</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table LabelColumnName:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>LabelColumnName</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table Featurizer:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Details</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Feature</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Detected Column Type</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Imputation</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Transformations</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table ProbabilityDistributionUnpivot:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Predicted</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Value</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Actual</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Confidence Threshold</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table ROC:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>FPR</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>TPR</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table IterationDetails:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Estimator</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Score</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Scaler</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Index</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Estimator Name</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table IterationDetailsMax:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Parameter Name</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Parameter Value</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table EnsembleIterationFullDetails:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Index</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Weights</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Iteration</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>EnsembleIterationAlgorithmNames.Index</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>EnsembleIterationAlgorithmNames.Details.pipeline.1</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Algorithm Details</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Algorithm Score</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Algorithm Name</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Algorithm Parameter Name</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Algorithm Parameter Value</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>AlgorithmKey</td>
		<td></td>
		<td>Calculated Column</td>
		<td>[Algorithm Name] &amp; &quot;(&quot; &amp; [Iteration] &amp; &quot;)&quot; </td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table IsEnsemble:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>IsEnsemble</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table Selector Table:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Confidence Threshold</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table PopulationSize:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>PopulationSize</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table UnitBenefit:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>UnitBenefit</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table UnitCost:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>UnitCost</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table KeyInfluencers_TopPredictors:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Feature Name</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Feature Type</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Feature Importance</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table KeyInfluencers_Breakdowns:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Feature Name</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Bin</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>% of Positive Outcome</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Roles:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Role Name</th>
		<th>Table Name</th>
		<th>Description</th>
		<th>Expression</th>
	</tr>
</table>
<hr></hr><br></br><h3><div>Relationships:</div></h3><br></br><table border='1px' cellpadding='1' cellspacing='1'><tr ><td >Name</td><td >CrossFilteringBehavior</td><td >FromCardinality</td><td >FromColumn</td><td >FromTable</td><td >IsActive</td><td >IsRemoved</td><td >JoinOnDateBehavior</td><td >RelyOnReferentialIntegrity</td><td >SecurityFilteringBehavior</td><td >State</td><td >ToCardinality</td><td >ToColumn</td><td >ToTable</td><td >Type</td></tr><tr ><td >d4f58599-7ea6-446c-9cfb-3962c5ad27f6</td><td >OneDirection</td><td >Many</td><td >Confidence Threshold</td><td >ProbabilityDistributionUnpivot</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Confidence Threshold</td><td >ProbabilityDistribution</td><td >SingleColumn</td></tr><tr ><td >1d1470b1-ce68-4583-b001-9932a7d72747</td><td >BothDirections</td><td >One</td><td >Confidence</td><td >NegativeDistribution</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Confidence Threshold</td><td >ProbabilityDistribution</td><td >SingleColumn</td></tr><tr ><td >252ff55f-cacd-4846-936a-bf68b3bf556a</td><td >BothDirections</td><td >One</td><td >Confidence</td><td >PositiveDistribution</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Confidence Threshold</td><td >ProbabilityDistribution</td><td >SingleColumn</td></tr><tr ><td >858ba353-a623-4c4a-8c89-4112f7beba9a</td><td >OneDirection</td><td >Many</td><td >Feature Name</td><td >KeyInfluencers_Breakdowns</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Feature Name</td><td >KeyInfluencers_TopPredictors</td><td >SingleColumn</td></tr></table><hr></hr><br></br><h2><div>M (Power Query) Script:</div></h2><br></br><br></br><font face="verdana" size="2"<div>DateTableTemplate_bf74721a-aede-42c8-8889-ff64aefef54c-4e09eb61-0a4e-4898-91e9-93dbd922867b<br></br><br></br>Calendar(Date(2015,1,1), Date(2015,1,1))<br></br><br></br><br></br>----------------------<br></br>SliderValue-f5fee1d0-67bf-466d-b8ef-70c8aa5f826c<br></br><br></br>SUMMARIZE(ProbabilityDistribution,ProbabilityDistribution[Confidence Threshold])<br></br><br></br><br></br>----------------------<br></br>Distribution-58713755-5c94-4dec-85d2-fe2a44941389<br></br><br></br><br></br>    VAR selectedValue = MAX(SliderValue[Confidence Threshold])<br></br>    VAR TrueP = CALCULATE(AVERAGE(ProbabilityDistribution[TP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)<br></br>    VAR FalseP = CALCULATE(AVERAGE(ProbabilityDistribution[FP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)<br></br>    VAR TrueN = CALCULATE(AVERAGE(ProbabilityDistribution[TN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)<br></br>    VAR FalseN = CALCULATE(AVERAGE(ProbabilityDistribution[FN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)<br></br>    return SELECTCOLUMNS({(<font color="red">"Actual Win"</font>, <font color="red">"True Positive"</font>, TrueP), (<font color="red">"Actual Win"</font>, <font color="red">"False Negative"</font>, FalseN), (<font color="red">"Actual Loss"</font>, <font color="red">"True Negative"</font>, TrueN), (<font color="red">"Actual Loss"</font>, <font color="red">"False Positive"</font>, FalseP)}, <font color="red">"Actual"</font>, [Value1], <font color="red">"Predicted"</font>, [Value2], <font color="red">"Count"</font>, [Value3])<br></br><br></br><br></br>----------------------<br></br>DataTableDistribution-a59ab7f4-1f27-45e2-ba60-2cd17ad47557<br></br><br></br><br></br>    DATATABLE(<font color="red">"Actual"</font>, string, <font color="red">"Predicted"</font>, string, {{<font color="red">"Actual Win"</font>, <font color="red">"True Positive"</font>}, {<font color="red">"Actual Win"</font>, <font color="red">"False Negative"</font>}, {<font color="red">"Actual Loss"</font>, <font color="red">"True Negative"</font>}, {<font color="red">"Actual Loss"</font>, <font color="red">"False Positive"</font>}})<br></br><br></br><br></br>----------------------<br></br>Output-653d8e1f-4391-4d7e-b28c-6b56ce7ba792<br></br><br></br><font color="blue">let</font><br></br>    Source = PowerBI.Dataflows([]),<br></br>    Workspace = Source{[workspaceId=WorkspaceId]}[Data],<br></br>    Dataflow = Workspace{[dataflowId=DataflowId]}[Data],<br></br>    ModelOutput = Dataflow{[entity=EntityName]}[Data],<br></br>    TrainingResult = ModelOutput{0}[Stats],<br></br>    data = <font color="purple">Json.Document</font>(TrainingResult as <font color="blue">any</font>) as <font color="blue">any</font><br></br><font color="blue">in</font><br></br>    data<br></br><br></br><br></br>----------------------<br></br>PositiveDistribution-91f84d9f-c6a8-4294-b104-bf69daf7a535<br></br><br></br><font color="blue">let</font><br></br>    Source = Output,<br></br>    positiveScoringDistribution = Output[Reports][ScoringDistribution][Positive],<br></br>    ConvertedTable = <font color="purple">Table.FromRows</font>(positiveScoringDistribution, {<font color="red">"Confidence"</font>, <font color="red">"Count"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(ConvertedTable, {{<font color="red">"Confidence"</font>, <font color="blue">type</font> number}, {<font color="red">"Count"</font>, <font color="purple">Int64.Type</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type"</font><br></br><br></br><br></br>----------------------<br></br>NegativeDistribution-9ecafd3f-cd5e-4068-87eb-1b18a8c2b35c<br></br><br></br><font color="blue">let</font><br></br>    Source = Output,<br></br>    negativeScoringDistribution = Output[Reports][ScoringDistribution][Negative],<br></br>    ConvertedTable = <font color="purple">Table.FromRows</font>(negativeScoringDistribution, {<font color="red">"Confidence"</font>,<font color="red">"Count"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(ConvertedTable,{{<font color="red">"Confidence"</font>, <font color="blue">type</font> number}, {<font color="red">"Count"</font>, <font color="purple">Int64.Type</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type"</font><br></br><br></br><br></br>----------------------<br></br>ProbabilityDistribution-408dc3ad-9b73-4397-8e44-5aa278f43617<br></br><br></br><font color="blue">let</font><br></br>    Source = Output,<br></br>    Distribution = Output[Reports][ScoringDistribution][Slider][data],<br></br>    ConvertedTable = <font color="purple">Table.FromRows</font>(Distribution, {<font color="red">"Confidence Threshold Tmp"</font>, <font color="red">"TP"</font>, <font color="red">"FP"</font>, <font color="red">"TN"</font>, <font color="red">"FN"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(ConvertedTable, {{<font color="red">"Confidence Threshold Tmp"</font>, <font color="blue">type</font> number}, {<font color="red">"TP"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"FP"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"TN"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"FN"</font>, <font color="purple">Int64.Type</font>}}),<br></br>    BUGFIX1 = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type"</font>, <font color="red">"Confidence Threshold"</font>, each [Confidence Threshold Tmp]+.01),<br></br>    BUGFIX2 = <font color="purple">Table.TransformColumnTypes</font>(BUGFIX1,{{<font color="red">"Confidence Threshold"</font>, <font color="blue">type</font> number}}),<br></br>    BUGFIX3 = <font color="purple">Table.RemoveColumns</font>(BUGFIX2,{<font color="red">"Confidence Threshold Tmp"</font>}),<br></br>    BUGFIX4 = <font color="purple">Table.InsertRows</font>(BUGFIX3, 0, {[TP=<font color="purple">List.Max</font>(BUGFIX3[TP]), FP=<font color="purple">List.Max</font>(BUGFIX3[FP]), TN=0, FN=0, Confidence Threshold=0.00]}),<br></br>    #<font color="red">"Added Custom"</font> = <font color="purple">Table.AddColumn</font>(BUGFIX4, <font color="red">"Population"</font>, each ([TP]+[FP])/([TP]+[FP]+[TN]+[FN])),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Added Custom"</font>,{{<font color="red">"Population"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"Confidence Threshold"</font>, <font color="blue">type</font> number}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type1"</font><br></br><br></br><br></br>----------------------<br></br>LabelForTrueOutcomes-9b5d279a-52b4-43c7-ba0a-4bc0fb23716d<br></br><br></br><font color="red">"1"</font> meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]<br></br><br></br><br></br>----------------------<br></br>LabelForFalseOutcomes-cfe12ed3-e821-4e40-8f6d-9d8f4b5cefcc<br></br><br></br><font color="red">"Not 1"</font> meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]<br></br><br></br><br></br>----------------------<br></br>Parameters-29725471-d9b5-492e-9029-dfb617b9cc68<br></br><br></br><font color="blue">let</font><br></br>    paramlist = {{<font color="red">"WorkspaceId"</font>,WorkspaceId}, {<font color="red">"DataflowId"</font>,DataflowId}, {<font color="red">"EntityName"</font>,EntityName}, {<font color="red">"TrueLabel"</font>,LabelForTrueOutcomes}, {<font color="red">"FalseLabel"</font>, LabelForFalseOutcomes}, {<font color="red">"LabelColumnName"</font>, LabelColumnName}, {<font color="red">"LastBookmarkState"</font>, LastBookmarkState}, {<font color="red">"LastProbabilityThreshold"</font>, LastProbabilityThreshold}},<br></br>    #<font color="red">"Converted to Table"</font> = <font color="purple">Table.FromList</font>(paramlist , <font color="purple">Splitter.SplitByNothing</font>(), <font color="blue">null</font>, <font color="blue">null</font>, <font color="purple">ExtraValues.Error</font>),<br></br>    #<font color="red">"Extracted Values"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Converted to Table"</font>, {<font color="red">"Column1"</font>, each <font color="purple">Text.Combine</font>(<font color="purple">List.Transform</font>(_, <font color="purple">Text.From</font>), <font color="red">","</font>), <font color="blue">type</font> <font color="blue">text</font>}),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Extracted Values"</font>, <font color="red">"Column1"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>(<font color="red">","</font>, <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"Column1.1"</font>, <font color="red">"Column1.2"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"Column1.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column1.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"Column1.1"</font>, <font color="red">"ParameterName"</font>}, {<font color="red">"Column1.2"</font>, <font color="red">"ParameterValue"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns"</font><br></br><br></br><br></br>----------------------<br></br>WorkspaceId-728c44e4-03fa-4c68-9c24-2e2ba3bf88f9<br></br><br></br>"87fdfdfd-8174-4499-94cd-8d0dec621a6e" meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]<br></br><br></br><br></br>----------------------<br></br>DataflowId-d5ae254e-4cad-4a82-9820-fdec785c96f6<br></br><br></br>"50d115fd-a0b4-43d2-9afa-ba2e09b9f29e" meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]<br></br><br></br><br></br>----------------------<br></br>EntityName-274b6df6-1365-40c2-80c3-2630095f051a<br></br><br></br><font color="red">"David ML"</font> meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]<br></br><br></br><br></br>----------------------<br></br>LabelColumnName-e7eddffd-4c51-4347-b910-48439afc8606<br></br><br></br><font color="red">"Buyer"</font> meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]<br></br><br></br><br></br>----------------------<br></br>Featurizer-3b680940-1d82-452f-be21-deccfa4fc63a<br></br><br></br><font color="blue">let</font><br></br>    Source = Output,<br></br>    featurizer = Output[Featurizers],<br></br>    ConvertedTable = <font color="purple">Table.FromRows</font>(featurizer, {<font color="red">"Column1"</font>, <font color="red">"Column2"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(ConvertedTable, {{<font color="red">"Column1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type"</font>, <font color="red">"Column2"</font>, <font color="purple">Splitter.SplitTextByEachDelimiter</font>({<font color="red">","</font>}, <font color="purple">QuoteStyle.Csv</font>, false), {<font color="red">"Column2.1"</font>, <font color="red">"Column2.2"</font>}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"Column2.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter1"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type1"</font>, <font color="red">"Column2.2"</font>, <font color="purple">Splitter.SplitTextByEachDelimiter</font>({<font color="red">","</font>}, <font color="purple">QuoteStyle.Csv</font>, false), {<font color="red">"Column2.2.1"</font>, <font color="red">"Column2.2.2"</font>}),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter1"</font>,{{<font color="red">"Column2.2.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2.2.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter2"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type2"</font>, <font color="red">"Column2.1"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>(<font color="red">":"</font>, <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"Column2.1.1"</font>, <font color="red">"Column2.1.2"</font>}),<br></br>    #<font color="red">"Changed Type3"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter2"</font>,{{<font color="red">"Column2.1.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2.1.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter3"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type3"</font>, <font color="red">"Column2.2.1"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>(<font color="red">":"</font>, <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"Column2.2.1.1"</font>, <font color="red">"Column2.2.1.2"</font>}),<br></br>    #<font color="red">"Changed Type4"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter3"</font>,{{<font color="red">"Column2.2.1.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2.2.1.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter4"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type4"</font>, <font color="red">"Column2.2.2"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>(<font color="red">":"</font>, <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"Column2.2.2.1"</font>, <font color="red">"Column2.2.2.2"</font>}),<br></br>    #<font color="red">"Changed Type5"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter4"</font>,{{<font color="red">"Column2.2.2.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2.2.2.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type5"</font>,{{<font color="red">"Column1"</font>, <font color="red">"Feature"</font>},{<font color="red">"Column2.1.2"</font>, <font color="red">"Detected Column Type"</font>}, {<font color="red">"Column2.2.1.2"</font>, <font color="red">"Imputation"</font>}, {<font color="red">"Column2.2.2.2"</font>, <font color="red">"Transformations"</font>}}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Renamed Columns"</font>,{<font color="red">"Column2.1.1"</font>, <font color="red">"Column2.2.1.1"</font>, <font color="red">"Column2.2.2.1"</font>}),<br></br>    #<font color="red">"Added Conditional Column"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Removed Columns"</font>, <font color="red">"Details"</font>, each if <font color="purple">Text.Contains</font>([Detected Column Type], <font color="red">"Categorical"</font>) then "https:<font color="green">//docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if <font color="purple">Text.Contains</font>([Detected Column Type], <font color="red">"Numeric"</font>) then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if <font color="purple">Text.Contains</font>([Detected Column Type], <font color="red">"CategoricalHash"</font>) then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if <font color="purple">Text.Contains</font>([Detected Column Type], <font color="red">"Text"</font>) then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if <font color="purple">Text.Contains</font>([Detected Column Type], <font color="red">"DateTime"</font>) then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization<font color="red">" else "</font>https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train")</font>
<font color="blue">in</font><br></br>    #<font color="red">"Added Conditional Column"</font><br></br><br></br><br></br>----------------------<br></br>ProbabilityDistributionUnpivot-4a404138-8f4d-4e55-8cd4-19e6b53ec3c8<br></br><br></br><font color="blue">let</font><br></br>    Source = Output,<br></br>    Distribution = Output[Reports][ScoringDistribution][Slider][data],<br></br>    ConvertedTable = <font color="purple">Table.FromRows</font>(Distribution, {<font color="red">"Confidence Threshold"</font>, <font color="red">"True Positive"</font>, <font color="red">"False Positive"</font>, <font color="red">"True Negative"</font>, <font color="red">"False Negative"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(ConvertedTable, {{<font color="red">"Confidence Threshold"</font>, <font color="blue">type</font> number}, {<font color="red">"True Positive"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"False Positive"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"True Negative"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"False Negative"</font>, <font color="purple">Int64.Type</font>}}),<br></br>    #<font color="red">"Unpivoted Columns"</font> = <font color="purple">Table.Unpivot</font>OtherColumns(#<font color="red">"Changed Type"</font>, {<font color="red">"Confidence Threshold"</font>}, <font color="red">"Attribute"</font>, <font color="red">"Value"</font>),<br></br>    #<font color="red">"Added Conditional Column"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Unpivoted Columns"</font>, <font color="red">"Actual"</font>, each if [Attribute] = <font color="red">"True Positive"</font> then <font color="red">"Actual Win"</font> else if [Attribute] = <font color="red">"False Negative"</font> then <font color="red">"Actual Win"</font> else if [Attribute] = <font color="red">"True Negative"</font> then <font color="red">"Actual Loss"</font> else if [Attribute] = <font color="red">"False Positive"</font> then <font color="red">"Actual Loss"</font> else <font color="blue">null</font>),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Added Conditional Column"</font>,{{<font color="red">"Attribute"</font>, <font color="red">"Predicted"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns1"</font><br></br><br></br><br></br>----------------------<br></br>ROC-b18d270b-f0d2-4098-b6d8-3209823d7eb2<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Table.NestedJoin</font>(FPR,{<font color="red">"Index"</font>},TPR,{<font color="red">"Index"</font>},<font color="red">"TPR"</font>,<font color="purple">JoinKind.Inner</font>),<br></br>    #<font color="red">"Expanded TPR"</font> = <font color="purple">Table.ExpandTableColumn</font>(Source, <font color="red">"TPR"</font>, {<font color="red">"TPR"</font>}, {<font color="red">"TPR.1"</font>}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Expanded TPR"</font>,{<font color="red">"Index"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"TPR.1"</font>, <font color="red">"TPR"</font>}}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Renamed Columns"</font>,{{<font color="red">"TPR"</font>, <font color="blue">type</font> number}, {<font color="red">"FPR"</font>, <font color="blue">type</font> number}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type"</font><br></br><br></br><br></br>----------------------<br></br>IterationDetails-b55cc167-d8ce-49a2-8c3a-fbfab0a00686<br></br><br></br><font color="blue">let</font><br></br>    Source = Output,<br></br>    TrainingIterationsNode = Source[TrainingIterations],<br></br>    #<font color="red">"Converted to Table"</font> = <font color="purple">Table.FromList</font>(TrainingIterationsNode, <font color="purple">Splitter.SplitByNothing</font>(), <font color="blue">null</font>, <font color="blue">null</font>, <font color="purple">ExtraValues.Error</font>),<br></br>    #<font color="red">"Expanded Column1"</font> = <font color="purple">Table.ExpandRecordColumn</font>(#<font color="red">"Converted to Table"</font>, <font color="red">"Column1"</font>, {<font color="red">"pipeline"</font>, <font color="red">"score"</font>}, {<font color="red">"Column1.pipeline"</font>, <font color="red">"Column1.score"</font>}),<br></br>    #<font color="red">"Extracted Values1"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Expanded Column1"</font>, {<font color="red">"Column1.pipeline"</font>, each <font color="purple">Text.Combine</font>(<font color="purple">List.Transform</font>(_, <font color="purple">Text.From</font>), ";"), <font color="blue">type</font> <font color="blue">text</font>}),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Extracted Values1"</font>, <font color="red">"Column1.pipeline"</font>, <font color="purple">Splitter.SplitTextByEachDelimiter</font>({";"}, <font color="purple">QuoteStyle.Csv</font>, false), {<font color="red">"Column1.pipeline.1"</font>, <font color="red">"Column1.pipeline.2"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"Column1.pipeline.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column1.pipeline.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Added Custom"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type"</font>, <font color="red">"Scaler"</font>, each [Column1.pipeline.1] & ")"),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Added Custom"</font>,{<font color="red">"Column1.pipeline.1"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"Column1.score"</font>, <font color="red">"Score"</font>}, {<font color="red">"Column1.pipeline.2"</font>, <font color="red">"Estimator"</font>}}),<br></br>    #<font color="red">"Added Index"</font> = <font color="purple">Table.AddIndexColumn</font>(#<font color="red">"Renamed Columns"</font>, <font color="red">"Index"</font>, 1, 1),<br></br>    #<font color="red">"Reordered Columns"</font> = <font color="purple">Table.ReorderColumns</font>(#<font color="red">"Added Index"</font>,{<font color="red">"Index"</font>, <font color="red">"Estimator"</font>, <font color="red">"Score"</font>, <font color="red">"Scaler"</font>}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Reordered Columns"</font>,{{<font color="red">"Score"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Inserted Text Before Delimiter"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type1"</font>, <font color="red">"Text Before Delimiter"</font>, each <font color="purple">Text.BeforeDelimiter</font>([Estimator], "("), <font color="blue">type</font> <font color="blue">text</font>),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Inserted Text Before Delimiter"</font>,{{<font color="red">"Text Before Delimiter"</font>, <font color="red">"Estimator Name Temp"</font>}}),<br></br>    #<font color="red">"Added Conditional Column"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Renamed Columns1"</font>, <font color="red">"Estimator Name"</font>, each if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"ExtraTreesClassifier"</font>) then <font color="red">"Extra Trees Classifier"</font> else if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"LightGBMClassifier"</font>) then <font color="red">"Light GBM Classifier"</font> else if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"RandomForestClassifier"</font>) then <font color="red">"Random Forest Classifier"</font> else if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"LogisticRegression"</font>) then <font color="red">"Logistic Regression"</font> else if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"GradientBoostingClassifier"</font>) then <font color="red">"Gradient Boosting Classifier"</font> else if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"PreFittedSoftVotingClassifier"</font>) then "Pre-fitted Soft Voting Classifier" else [Estimator Name Temp]),<br></br>    #<font color="red">"Removed Columns1"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Added Conditional Column"</font>,{<font color="red">"Estimator Name Temp"</font>})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Removed Columns1"</font><br></br><br></br><br></br>----------------------<br></br>IterationDetailsMax-8162fc6d-89e2-4915-9ac8-9ec415f06cc4<br></br><br></br><font color="blue">let</font><br></br>    Source = IterationDetails, <br></br>    MaxScoreRow = <font color="purple">Table.Max</font>(Source, <font color="red">"Score"</font>),<br></br>    ParameterRowValue = <font color="purple">Record.Field</font>(MaxScoreRow, <font color="red">"Estimator"</font>),<br></br>    ParameterValues = <font color="purple">Text.BetweenDelimiters</font>(ParameterRowValue, "(<font color="red">", "</font>)"),<br></br>    ParameterValuesSplit = <font color="purple">Text.Split</font>(ParameterValues, <font color="red">","</font>),<br></br>    TableConverted = <font color="purple">Table.FromList</font>(ParameterValuesSplit),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(TableConverted, <font color="red">"Column1"</font>, <font color="purple">Splitter.SplitTextByEachDelimiter</font>({"="}, <font color="purple">QuoteStyle.Csv</font>, false), {<font color="red">"Column1.1"</font>, <font color="red">"Column1.2"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"Column1.1"</font>, <font color="red">"Parameter Name"</font>}, {<font color="red">"Column1.2"</font>, <font color="red">"Parameter Value"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns"</font><br></br><br></br><br></br>----------------------<br></br>EnsembleIterationFullDetails-e2fa62f5-d3df-41f1-a3a2-140250c26927<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Table.Join</font>(EnsembleWeights, {<font color="red">"Index"</font>}, EnsembleIterations, {<font color="red">"Index"</font>}),<br></br>    #<font color="red">"Merged Queries"</font> = <font color="purple">Table.NestedJoin</font>(Source,{<font color="red">"Iteration"</font>},EnsembleIterationAlgorithmNames,{<font color="red">"Index"</font>},<font color="red">"EnsembleIterationAlgorithmNames"</font>,<font color="purple">JoinKind.Inner</font>),<br></br>    #<font color="red">"Expanded EnsembleIterationAlgorithmNames"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries"</font>, <font color="red">"EnsembleIterationAlgorithmNames"</font>, {<font color="red">"Index"</font>, <font color="red">"Details"</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Index"</font>, <font color="red">"EnsembleIterationAlgorithmNames.Details"</font>}),<br></br>    #<font color="red">"Expanded EnsembleIterationAlgorithmNames.Details"</font> = <font color="purple">Table.ExpandRecordColumn</font>(#<font color="red">"Expanded EnsembleIterationAlgorithmNames"</font>, <font color="red">"EnsembleIterationAlgorithmNames.Details"</font>, {<font color="red">"pipeline"</font>, <font color="red">"score"</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline"</font>, <font color="red">"EnsembleIterationAlgorithmNames.Details.score"</font>}),<br></br>    #<font color="red">"Extracted Values"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Expanded EnsembleIterationAlgorithmNames.Details"</font>, {<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline"</font>, each <font color="purple">Text.Combine</font>(<font color="purple">List.Transform</font>(_, <font color="purple">Text.From</font>), "#(tab)"), <font color="blue">type</font> <font color="blue">text</font>}),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Extracted Values"</font>, <font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>("#(tab)", <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline.1"</font>, <font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline.2"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Weights"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"Iteration"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"Index"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Index"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Details.score"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Inserted Text Before Delimiter"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type"</font>, <font color="red">"Text Before Delimiter"</font>, each <font color="purple">Text.BeforeDelimiter</font>([EnsembleIterationAlgorithmNames.Details.pipeline.2], "("), <font color="blue">type</font> <font color="blue">text</font>),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Inserted Text Before Delimiter"</font>,{{<font color="red">"Text Before Delimiter"</font>, <font color="red">"Algorithm Name"</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Details.score"</font>, <font color="red">"Algorithm Score"</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline.2"</font>, <font color="red">"Algorithm Details"</font>}}),<br></br>    #<font color="red">"Duplicated Column"</font> = <font color="purple">Table.DuplicateColumn</font>(#<font color="red">"Renamed Columns"</font>, <font color="red">"Algorithm Details"</font>, "Algorithm Details - Copy"),<br></br>    #<font color="red">"Extracted Text Between Delimiters"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Duplicated Column"</font>, {{"Algorithm Details - Copy", each <font color="purple">Text.BetweenDelimiters</font>(_, "(<font color="red">", "</font>)"), <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Extracted Text Between Delimiters"</font>,{{"Algorithm Details - Copy<font color="red">", "</font>Algorithm Parameters"}}),<br></br>    #<font color="red">"Split Column by Delimiter1"</font> = <font color="purple">Table.ExpandListColumn</font>(<font color="purple">Table.TransformColumns</font>(#<font color="red">"Renamed Columns1"</font>, {{<font color="red">"Algorithm Parameters"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>(<font color="red">","</font>, <font color="purple">QuoteStyle.None</font>), <font color="blue">let</font> itemType = (<font color="blue">type</font> nullable <font color="blue">text</font>) meta [Serialized.Text = <font color="blue">true</font>] <font color="blue">in</font> <font color="blue">type</font> {itemType}}}), <font color="red">"Algorithm Parameters"</font>),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter1"</font>,{{<font color="red">"Algorithm Parameters"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter2"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type1"</font>, <font color="red">"Algorithm Parameters"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>("=", <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"Algorithm Parameters.1"</font>, <font color="red">"Algorithm Parameters.2"</font>}),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter2"</font>,{{<font color="red">"Algorithm Parameters.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Algorithm Parameters.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns2"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type2"</font>,{{<font color="red">"Algorithm Parameters.1"</font>, <font color="red">"Algorithm Parameter Name"</font>}, {<font color="red">"Algorithm Parameters.2"</font>, <font color="red">"Algorithm Parameter Value"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns2"</font><br></br><br></br><br></br>----------------------<br></br>IsEnsemble-17b54b46-74f0-4c72-80bf-94cb1b5abf7c<br></br><br></br><font color="blue">let</font><br></br>    Source = Output,<br></br>    EnsembleDetailsRecord = Source[EnsembleDetails],<br></br>    <br></br>    #<font color="red">"IsEnsemble"</font> =    <br></br>        if EnsembleDetailsRecord <> <font color="blue">null</font> then<br></br>            <font color="blue">true</font><br></br>        else<br></br>            false<br></br><font color="blue">in</font><br></br>    #<font color="red">"IsEnsemble"</font><br></br><br></br><br></br>----------------------<br></br>Selector Table-84811904-381d-4faf-a0c2-9bb162dd84f8<br></br><br></br>VALUES('SliderValue'[Confidence Threshold])<br></br><br></br><br></br>----------------------<br></br>PopulationSize-584682ac-9044-45e8-8fa0-ea1dff74a9a3<br></br><br></br>GENERATESERIES(0, 100000, 1)<br></br><br></br><br></br>----------------------<br></br>UnitBenefit-1cc3fb42-edb5-4287-8940-2bbbd5478a35<br></br><br></br>GENERATESERIES(0, 100000, 1)<br></br><br></br><br></br>----------------------<br></br>UnitCost-86426883-8fbc-4308-bd2e-c5de17be2316<br></br><br></br>GENERATESERIES(0, 100000, 1)<br></br><br></br><br></br>----------------------<br></br>KeyInfluencers_TopPredictors-838190cf-b85e-48b0-972e-0ebd1d7451a6<br></br><br></br><font color="blue">let</font><br></br>    Source = Output,<br></br>    KeyInfluencers1 = Output[KeyInfluencers],<br></br>    TopPredictors1 = <font color="purple">Table.FromRows</font>(KeyInfluencers1[TopPredictors], {<font color="red">"Feature Name"</font>, <font color="red">"Feature Type"</font>, <font color="red">"Feature Importance"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(TopPredictors1,{{<font color="red">"Feature Importance"</font>, <font color="blue">type</font> number}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type"</font><br></br><br></br><br></br>----------------------<br></br>KeyInfluencers_Breakdowns-af506967-bd96-4704-97cd-bdd9115ea0e0<br></br><br></br><font color="blue">let</font><br></br>    Source = Output,<br></br>    KeyInfluencers1 = Output[KeyInfluencers],<br></br>    PredictorBreakdowns1 = <font color="purple">Table.FromRows</font>(KeyInfluencers1[PredictorBreakdowns], {<font color="red">"Feature Name"</font>, <font color="red">"Bin"</font>, "% of Positive Outcome"}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(PredictorBreakdowns1,{{"% of Positive Outcome", <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Changed Type"</font>, each [#"% of Positive Outcome"] <> 0)<br></br><font color="blue">in</font><br></br>    #<font color="red">"Filtered Rows"</font><br></br><br></br><br></br>----------------------<br></br></font></div><br></br><hr></hr><br></br><h3><div>Partitions:</div></h3><br></br><table border='1px' cellpadding='1' cellspacing='1'><tr ><td >Name</td><td >QueryDefinition</td></tr><tr ><td >DateTableTemplate_bf74721a-aede-42c8-8889-ff64aefef54c-4e09eb61-0a4e-4898-91e9-93dbd922867b</td><td >Calendar(Date(2015,1,1), Date(2015,1,1))</td></tr><tr ><td >SliderValue-f5fee1d0-67bf-466d-b8ef-70c8aa5f826c</td><td >SUMMARIZE(ProbabilityDistribution,ProbabilityDistribution[Confidence Threshold])</td></tr><tr ><td >Distribution-58713755-5c94-4dec-85d2-fe2a44941389</td><td ><br></br>    VAR selectedValue = MAX(SliderValue[Confidence Threshold])<br></br>    VAR TrueP = CALCULATE(AVERAGE(ProbabilityDistribution[TP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)<br></br>    VAR FalseP = CALCULATE(AVERAGE(ProbabilityDistribution[FP]), ProbabilityDistribution[Confidence Threshold] = selectedValue)<br></br>    VAR TrueN = CALCULATE(AVERAGE(ProbabilityDistribution[TN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)<br></br>    VAR FalseN = CALCULATE(AVERAGE(ProbabilityDistribution[FN]), ProbabilityDistribution[Confidence Threshold] = selectedValue)<br></br>    return SELECTCOLUMNS({(<font color="red">"Actual Win"</font>, <font color="red">"True Positive"</font>, TrueP), (<font color="red">"Actual Win"</font>, <font color="red">"False Negative"</font>, FalseN), (<font color="red">"Actual Loss"</font>, <font color="red">"True Negative"</font>, TrueN), (<font color="red">"Actual Loss"</font>, <font color="red">"False Positive"</font>, FalseP)}, <font color="red">"Actual"</font>, [Value1], <font color="red">"Predicted"</font>, [Value2], <font color="red">"Count"</font>, [Value3])</td></tr><tr ><td >DataTableDistribution-a59ab7f4-1f27-45e2-ba60-2cd17ad47557</td><td ><br></br>    DATATABLE(<font color="red">"Actual"</font>, string, <font color="red">"Predicted"</font>, string, {{<font color="red">"Actual Win"</font>, <font color="red">"True Positive"</font>}, {<font color="red">"Actual Win"</font>, <font color="red">"False Negative"</font>}, {<font color="red">"Actual Loss"</font>, <font color="red">"True Negative"</font>}, {<font color="red">"Actual Loss"</font>, <font color="red">"False Positive"</font>}})</td></tr><tr ><td >Output-653d8e1f-4391-4d7e-b28c-6b56ce7ba792</td><td ><font color="blue">let</font><br></br>    Source = PowerBI.Dataflows([]),<br></br>    Workspace = Source{[workspaceId=WorkspaceId]}[Data],<br></br>    Dataflow = Workspace{[dataflowId=DataflowId]}[Data],<br></br>    ModelOutput = Dataflow{[entity=EntityName]}[Data],<br></br>    TrainingResult = ModelOutput{0}[Stats],<br></br>    data = <font color="purple">Json.Document</font>(TrainingResult as <font color="blue">any</font>) as <font color="blue">any</font><br></br><font color="blue">in</font><br></br>    data</td></tr><tr ><td >PositiveDistribution-91f84d9f-c6a8-4294-b104-bf69daf7a535</td><td ><font color="blue">let</font><br></br>    Source = Output,<br></br>    positiveScoringDistribution = Output[Reports][ScoringDistribution][Positive],<br></br>    ConvertedTable = <font color="purple">Table.FromRows</font>(positiveScoringDistribution, {<font color="red">"Confidence"</font>, <font color="red">"Count"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(ConvertedTable, {{<font color="red">"Confidence"</font>, <font color="blue">type</font> number}, {<font color="red">"Count"</font>, <font color="purple">Int64.Type</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type"</font></td></tr><tr ><td >NegativeDistribution-9ecafd3f-cd5e-4068-87eb-1b18a8c2b35c</td><td ><font color="blue">let</font><br></br>    Source = Output,<br></br>    negativeScoringDistribution = Output[Reports][ScoringDistribution][Negative],<br></br>    ConvertedTable = <font color="purple">Table.FromRows</font>(negativeScoringDistribution, {<font color="red">"Confidence"</font>,<font color="red">"Count"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(ConvertedTable,{{<font color="red">"Confidence"</font>, <font color="blue">type</font> number}, {<font color="red">"Count"</font>, <font color="purple">Int64.Type</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type"</font></td></tr><tr ><td >ProbabilityDistribution-408dc3ad-9b73-4397-8e44-5aa278f43617</td><td ><font color="blue">let</font><br></br>    Source = Output,<br></br>    Distribution = Output[Reports][ScoringDistribution][Slider][data],<br></br>    ConvertedTable = <font color="purple">Table.FromRows</font>(Distribution, {<font color="red">"Confidence Threshold Tmp"</font>, <font color="red">"TP"</font>, <font color="red">"FP"</font>, <font color="red">"TN"</font>, <font color="red">"FN"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(ConvertedTable, {{<font color="red">"Confidence Threshold Tmp"</font>, <font color="blue">type</font> number}, {<font color="red">"TP"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"FP"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"TN"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"FN"</font>, <font color="purple">Int64.Type</font>}}),<br></br>    BUGFIX1 = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type"</font>, <font color="red">"Confidence Threshold"</font>, each [Confidence Threshold Tmp]+.01),<br></br>    BUGFIX2 = <font color="purple">Table.TransformColumnTypes</font>(BUGFIX1,{{<font color="red">"Confidence Threshold"</font>, <font color="blue">type</font> number}}),<br></br>    BUGFIX3 = <font color="purple">Table.RemoveColumns</font>(BUGFIX2,{<font color="red">"Confidence Threshold Tmp"</font>}),<br></br>    BUGFIX4 = <font color="purple">Table.InsertRows</font>(BUGFIX3, 0, {[TP=<font color="purple">List.Max</font>(BUGFIX3[TP]), FP=<font color="purple">List.Max</font>(BUGFIX3[FP]), TN=0, FN=0, Confidence Threshold=0.00]}),<br></br>    #<font color="red">"Added Custom"</font> = <font color="purple">Table.AddColumn</font>(BUGFIX4, <font color="red">"Population"</font>, each ([TP]+[FP])/([TP]+[FP]+[TN]+[FN])),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Added Custom"</font>,{{<font color="red">"Population"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"Confidence Threshold"</font>, <font color="blue">type</font> number}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type1"</font></td></tr><tr ><td >LabelForTrueOutcomes-9b5d279a-52b4-43c7-ba0a-4bc0fb23716d</td><td ><font color="red">"1"</font> meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]</td></tr><tr ><td >LabelForFalseOutcomes-cfe12ed3-e821-4e40-8f6d-9d8f4b5cefcc</td><td ><font color="red">"Not 1"</font> meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]</td></tr><tr ><td >Parameters-29725471-d9b5-492e-9029-dfb617b9cc68</td><td ><font color="blue">let</font><br></br>    paramlist = {{<font color="red">"WorkspaceId"</font>,WorkspaceId}, {<font color="red">"DataflowId"</font>,DataflowId}, {<font color="red">"EntityName"</font>,EntityName}, {<font color="red">"TrueLabel"</font>,LabelForTrueOutcomes}, {<font color="red">"FalseLabel"</font>, LabelForFalseOutcomes}, {<font color="red">"LabelColumnName"</font>, LabelColumnName}, {<font color="red">"LastBookmarkState"</font>, LastBookmarkState}, {<font color="red">"LastProbabilityThreshold"</font>, LastProbabilityThreshold}},<br></br>    #<font color="red">"Converted to Table"</font> = <font color="purple">Table.FromList</font>(paramlist , <font color="purple">Splitter.SplitByNothing</font>(), <font color="blue">null</font>, <font color="blue">null</font>, <font color="purple">ExtraValues.Error</font>),<br></br>    #<font color="red">"Extracted Values"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Converted to Table"</font>, {<font color="red">"Column1"</font>, each <font color="purple">Text.Combine</font>(<font color="purple">List.Transform</font>(_, <font color="purple">Text.From</font>), <font color="red">","</font>), <font color="blue">type</font> <font color="blue">text</font>}),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Extracted Values"</font>, <font color="red">"Column1"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>(<font color="red">","</font>, <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"Column1.1"</font>, <font color="red">"Column1.2"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"Column1.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column1.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"Column1.1"</font>, <font color="red">"ParameterName"</font>}, {<font color="red">"Column1.2"</font>, <font color="red">"ParameterValue"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns"</font></td></tr><tr ><td >WorkspaceId-728c44e4-03fa-4c68-9c24-2e2ba3bf88f9</td><td >"87fdfdfd-8174-4499-94cd-8d0dec621a6e" meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]</td></tr><tr ><td >DataflowId-d5ae254e-4cad-4a82-9820-fdec785c96f6</td><td >"50d115fd-a0b4-43d2-9afa-ba2e09b9f29e" meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]</td></tr><tr ><td >EntityName-274b6df6-1365-40c2-80c3-2630095f051a</td><td ><font color="red">"David ML"</font> meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]</td></tr><tr ><td >LabelColumnName-e7eddffd-4c51-4347-b910-48439afc8606</td><td ><font color="red">"Buyer"</font> meta [IsParameterQuery=<font color="blue">true</font>, Type=<font color="red">"Text"</font>, IsParameterQueryRequired=<font color="blue">true</font>]</td></tr><tr ><td >Featurizer-3b680940-1d82-452f-be21-deccfa4fc63a</td><td ><font color="blue">let</font><br></br>    Source = Output,<br></br>    featurizer = Output[Featurizers],<br></br>    ConvertedTable = <font color="purple">Table.FromRows</font>(featurizer, {<font color="red">"Column1"</font>, <font color="red">"Column2"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(ConvertedTable, {{<font color="red">"Column1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type"</font>, <font color="red">"Column2"</font>, <font color="purple">Splitter.SplitTextByEachDelimiter</font>({<font color="red">","</font>}, <font color="purple">QuoteStyle.Csv</font>, false), {<font color="red">"Column2.1"</font>, <font color="red">"Column2.2"</font>}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"Column2.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter1"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type1"</font>, <font color="red">"Column2.2"</font>, <font color="purple">Splitter.SplitTextByEachDelimiter</font>({<font color="red">","</font>}, <font color="purple">QuoteStyle.Csv</font>, false), {<font color="red">"Column2.2.1"</font>, <font color="red">"Column2.2.2"</font>}),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter1"</font>,{{<font color="red">"Column2.2.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2.2.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter2"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type2"</font>, <font color="red">"Column2.1"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>(<font color="red">":"</font>, <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"Column2.1.1"</font>, <font color="red">"Column2.1.2"</font>}),<br></br>    #<font color="red">"Changed Type3"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter2"</font>,{{<font color="red">"Column2.1.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2.1.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter3"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type3"</font>, <font color="red">"Column2.2.1"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>(<font color="red">":"</font>, <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"Column2.2.1.1"</font>, <font color="red">"Column2.2.1.2"</font>}),<br></br>    #<font color="red">"Changed Type4"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter3"</font>,{{<font color="red">"Column2.2.1.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2.2.1.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter4"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type4"</font>, <font color="red">"Column2.2.2"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>(<font color="red">":"</font>, <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"Column2.2.2.1"</font>, <font color="red">"Column2.2.2.2"</font>}),<br></br>    #<font color="red">"Changed Type5"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter4"</font>,{{<font color="red">"Column2.2.2.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2.2.2.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type5"</font>,{{<font color="red">"Column1"</font>, <font color="red">"Feature"</font>},{<font color="red">"Column2.1.2"</font>, <font color="red">"Detected Column Type"</font>}, {<font color="red">"Column2.2.1.2"</font>, <font color="red">"Imputation"</font>}, {<font color="red">"Column2.2.2.2"</font>, <font color="red">"Transformations"</font>}}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Renamed Columns"</font>,{<font color="red">"Column2.1.1"</font>, <font color="red">"Column2.2.1.1"</font>, <font color="red">"Column2.2.2.1"</font>}),<br></br>    #<font color="red">"Added Conditional Column"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Removed Columns"</font>, <font color="red">"Details"</font>, each if <font color="purple">Text.Contains</font>([Detected Column Type], <font color="red">"Categorical"</font>) then "https:<font color="green">//docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if <font color="purple">Text.Contains</font>([Detected Column Type], <font color="red">"Numeric"</font>) then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if <font color="purple">Text.Contains</font>([Detected Column Type], <font color="red">"CategoricalHash"</font>) then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if <font color="purple">Text.Contains</font>([Detected Column Type], <font color="red">"Text"</font>) then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization" else if <font color="purple">Text.Contains</font>([Detected Column Type], <font color="red">"DateTime"</font>) then "https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train#data-pre-processing-and-featurization<font color="red">" else "</font>https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-configure-auto-train")</font><br></br><font color="blue">in</font><br></br>    #<font color="red">"Added Conditional Column"</font></td></tr><tr ><td >ProbabilityDistributionUnpivot-4a404138-8f4d-4e55-8cd4-19e6b53ec3c8</td><td ><font color="blue">let</font><br></br>    Source = Output,<br></br>    Distribution = Output[Reports][ScoringDistribution][Slider][data],<br></br>    ConvertedTable = <font color="purple">Table.FromRows</font>(Distribution, {<font color="red">"Confidence Threshold"</font>, <font color="red">"True Positive"</font>, <font color="red">"False Positive"</font>, <font color="red">"True Negative"</font>, <font color="red">"False Negative"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(ConvertedTable, {{<font color="red">"Confidence Threshold"</font>, <font color="blue">type</font> number}, {<font color="red">"True Positive"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"False Positive"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"True Negative"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"False Negative"</font>, <font color="purple">Int64.Type</font>}}),<br></br>    #<font color="red">"Unpivoted Columns"</font> = <font color="purple">Table.Unpivot</font>OtherColumns(#<font color="red">"Changed Type"</font>, {<font color="red">"Confidence Threshold"</font>}, <font color="red">"Attribute"</font>, <font color="red">"Value"</font>),<br></br>    #<font color="red">"Added Conditional Column"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Unpivoted Columns"</font>, <font color="red">"Actual"</font>, each if [Attribute] = <font color="red">"True Positive"</font> then <font color="red">"Actual Win"</font> else if [Attribute] = <font color="red">"False Negative"</font> then <font color="red">"Actual Win"</font> else if [Attribute] = <font color="red">"True Negative"</font> then <font color="red">"Actual Loss"</font> else if [Attribute] = <font color="red">"False Positive"</font> then <font color="red">"Actual Loss"</font> else <font color="blue">null</font>),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Added Conditional Column"</font>,{{<font color="red">"Attribute"</font>, <font color="red">"Predicted"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns1"</font></td></tr><tr ><td >ROC-b18d270b-f0d2-4098-b6d8-3209823d7eb2</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Table.NestedJoin</font>(FPR,{<font color="red">"Index"</font>},TPR,{<font color="red">"Index"</font>},<font color="red">"TPR"</font>,<font color="purple">JoinKind.Inner</font>),<br></br>    #<font color="red">"Expanded TPR"</font> = <font color="purple">Table.ExpandTableColumn</font>(Source, <font color="red">"TPR"</font>, {<font color="red">"TPR"</font>}, {<font color="red">"TPR.1"</font>}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Expanded TPR"</font>,{<font color="red">"Index"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"TPR.1"</font>, <font color="red">"TPR"</font>}}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Renamed Columns"</font>,{{<font color="red">"TPR"</font>, <font color="blue">type</font> number}, {<font color="red">"FPR"</font>, <font color="blue">type</font> number}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type"</font></td></tr><tr ><td >IterationDetails-b55cc167-d8ce-49a2-8c3a-fbfab0a00686</td><td ><font color="blue">let</font><br></br>    Source = Output,<br></br>    TrainingIterationsNode = Source[TrainingIterations],<br></br>    #<font color="red">"Converted to Table"</font> = <font color="purple">Table.FromList</font>(TrainingIterationsNode, <font color="purple">Splitter.SplitByNothing</font>(), <font color="blue">null</font>, <font color="blue">null</font>, <font color="purple">ExtraValues.Error</font>),<br></br>    #<font color="red">"Expanded Column1"</font> = <font color="purple">Table.ExpandRecordColumn</font>(#<font color="red">"Converted to Table"</font>, <font color="red">"Column1"</font>, {<font color="red">"pipeline"</font>, <font color="red">"score"</font>}, {<font color="red">"Column1.pipeline"</font>, <font color="red">"Column1.score"</font>}),<br></br>    #<font color="red">"Extracted Values1"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Expanded Column1"</font>, {<font color="red">"Column1.pipeline"</font>, each <font color="purple">Text.Combine</font>(<font color="purple">List.Transform</font>(_, <font color="purple">Text.From</font>), ";"), <font color="blue">type</font> <font color="blue">text</font>}),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Extracted Values1"</font>, <font color="red">"Column1.pipeline"</font>, <font color="purple">Splitter.SplitTextByEachDelimiter</font>({";"}, <font color="purple">QuoteStyle.Csv</font>, false), {<font color="red">"Column1.pipeline.1"</font>, <font color="red">"Column1.pipeline.2"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"Column1.pipeline.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column1.pipeline.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Added Custom"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type"</font>, <font color="red">"Scaler"</font>, each [Column1.pipeline.1] & ")"),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Added Custom"</font>,{<font color="red">"Column1.pipeline.1"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"Column1.score"</font>, <font color="red">"Score"</font>}, {<font color="red">"Column1.pipeline.2"</font>, <font color="red">"Estimator"</font>}}),<br></br>    #<font color="red">"Added Index"</font> = <font color="purple">Table.AddIndexColumn</font>(#<font color="red">"Renamed Columns"</font>, <font color="red">"Index"</font>, 1, 1),<br></br>    #<font color="red">"Reordered Columns"</font> = <font color="purple">Table.ReorderColumns</font>(#<font color="red">"Added Index"</font>,{<font color="red">"Index"</font>, <font color="red">"Estimator"</font>, <font color="red">"Score"</font>, <font color="red">"Scaler"</font>}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Reordered Columns"</font>,{{<font color="red">"Score"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Inserted Text Before Delimiter"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type1"</font>, <font color="red">"Text Before Delimiter"</font>, each <font color="purple">Text.BeforeDelimiter</font>([Estimator], "("), <font color="blue">type</font> <font color="blue">text</font>),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Inserted Text Before Delimiter"</font>,{{<font color="red">"Text Before Delimiter"</font>, <font color="red">"Estimator Name Temp"</font>}}),<br></br>    #<font color="red">"Added Conditional Column"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Renamed Columns1"</font>, <font color="red">"Estimator Name"</font>, each if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"ExtraTreesClassifier"</font>) then <font color="red">"Extra Trees Classifier"</font> else if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"LightGBMClassifier"</font>) then <font color="red">"Light GBM Classifier"</font> else if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"RandomForestClassifier"</font>) then <font color="red">"Random Forest Classifier"</font> else if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"LogisticRegression"</font>) then <font color="red">"Logistic Regression"</font> else if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"GradientBoostingClassifier"</font>) then <font color="red">"Gradient Boosting Classifier"</font> else if <font color="purple">Text.Contains</font>([Estimator], <font color="red">"PreFittedSoftVotingClassifier"</font>) then "Pre-fitted Soft Voting Classifier" else [Estimator Name Temp]),<br></br>    #<font color="red">"Removed Columns1"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Added Conditional Column"</font>,{<font color="red">"Estimator Name Temp"</font>})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Removed Columns1"</font></td></tr><tr ><td >IterationDetailsMax-8162fc6d-89e2-4915-9ac8-9ec415f06cc4</td><td ><font color="blue">let</font><br></br>    Source = IterationDetails, <br></br>    MaxScoreRow = <font color="purple">Table.Max</font>(Source, <font color="red">"Score"</font>),<br></br>    ParameterRowValue = <font color="purple">Record.Field</font>(MaxScoreRow, <font color="red">"Estimator"</font>),<br></br>    ParameterValues = <font color="purple">Text.BetweenDelimiters</font>(ParameterRowValue, "(<font color="red">", "</font>)"),<br></br>    ParameterValuesSplit = <font color="purple">Text.Split</font>(ParameterValues, <font color="red">","</font>),<br></br>    TableConverted = <font color="purple">Table.FromList</font>(ParameterValuesSplit),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(TableConverted, <font color="red">"Column1"</font>, <font color="purple">Splitter.SplitTextByEachDelimiter</font>({"="}, <font color="purple">QuoteStyle.Csv</font>, false), {<font color="red">"Column1.1"</font>, <font color="red">"Column1.2"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"Column1.1"</font>, <font color="red">"Parameter Name"</font>}, {<font color="red">"Column1.2"</font>, <font color="red">"Parameter Value"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns"</font></td></tr><tr ><td >EnsembleIterationFullDetails-e2fa62f5-d3df-41f1-a3a2-140250c26927</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Table.Join</font>(EnsembleWeights, {<font color="red">"Index"</font>}, EnsembleIterations, {<font color="red">"Index"</font>}),<br></br>    #<font color="red">"Merged Queries"</font> = <font color="purple">Table.NestedJoin</font>(Source,{<font color="red">"Iteration"</font>},EnsembleIterationAlgorithmNames,{<font color="red">"Index"</font>},<font color="red">"EnsembleIterationAlgorithmNames"</font>,<font color="purple">JoinKind.Inner</font>),<br></br>    #<font color="red">"Expanded EnsembleIterationAlgorithmNames"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries"</font>, <font color="red">"EnsembleIterationAlgorithmNames"</font>, {<font color="red">"Index"</font>, <font color="red">"Details"</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Index"</font>, <font color="red">"EnsembleIterationAlgorithmNames.Details"</font>}),<br></br>    #<font color="red">"Expanded EnsembleIterationAlgorithmNames.Details"</font> = <font color="purple">Table.ExpandRecordColumn</font>(#<font color="red">"Expanded EnsembleIterationAlgorithmNames"</font>, <font color="red">"EnsembleIterationAlgorithmNames.Details"</font>, {<font color="red">"pipeline"</font>, <font color="red">"score"</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline"</font>, <font color="red">"EnsembleIterationAlgorithmNames.Details.score"</font>}),<br></br>    #<font color="red">"Extracted Values"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Expanded EnsembleIterationAlgorithmNames.Details"</font>, {<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline"</font>, each <font color="purple">Text.Combine</font>(<font color="purple">List.Transform</font>(_, <font color="purple">Text.From</font>), "#(tab)"), <font color="blue">type</font> <font color="blue">text</font>}),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Extracted Values"</font>, <font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>("#(tab)", <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline.1"</font>, <font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline.2"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Weights"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"Iteration"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"Index"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Index"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Details.score"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Inserted Text Before Delimiter"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type"</font>, <font color="red">"Text Before Delimiter"</font>, each <font color="purple">Text.BeforeDelimiter</font>([EnsembleIterationAlgorithmNames.Details.pipeline.2], "("), <font color="blue">type</font> <font color="blue">text</font>),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Inserted Text Before Delimiter"</font>,{{<font color="red">"Text Before Delimiter"</font>, <font color="red">"Algorithm Name"</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Details.score"</font>, <font color="red">"Algorithm Score"</font>}, {<font color="red">"EnsembleIterationAlgorithmNames.Details.pipeline.2"</font>, <font color="red">"Algorithm Details"</font>}}),<br></br>    #<font color="red">"Duplicated Column"</font> = <font color="purple">Table.DuplicateColumn</font>(#<font color="red">"Renamed Columns"</font>, <font color="red">"Algorithm Details"</font>, "Algorithm Details - Copy"),<br></br>    #<font color="red">"Extracted Text Between Delimiters"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Duplicated Column"</font>, {{"Algorithm Details - Copy", each <font color="purple">Text.BetweenDelimiters</font>(_, "(<font color="red">", "</font>)"), <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Extracted Text Between Delimiters"</font>,{{"Algorithm Details - Copy<font color="red">", "</font>Algorithm Parameters"}}),<br></br>    #<font color="red">"Split Column by Delimiter1"</font> = <font color="purple">Table.ExpandListColumn</font>(<font color="purple">Table.TransformColumns</font>(#<font color="red">"Renamed Columns1"</font>, {{<font color="red">"Algorithm Parameters"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>(<font color="red">","</font>, <font color="purple">QuoteStyle.None</font>), <font color="blue">let</font> itemType = (<font color="blue">type</font> nullable <font color="blue">text</font>) meta [Serialized.Text = <font color="blue">true</font>] <font color="blue">in</font> <font color="blue">type</font> {itemType}}}), <font color="red">"Algorithm Parameters"</font>),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter1"</font>,{{<font color="red">"Algorithm Parameters"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter2"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Changed Type1"</font>, <font color="red">"Algorithm Parameters"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>("=", <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"Algorithm Parameters.1"</font>, <font color="red">"Algorithm Parameters.2"</font>}),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter2"</font>,{{<font color="red">"Algorithm Parameters.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Algorithm Parameters.2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns2"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type2"</font>,{{<font color="red">"Algorithm Parameters.1"</font>, <font color="red">"Algorithm Parameter Name"</font>}, {<font color="red">"Algorithm Parameters.2"</font>, <font color="red">"Algorithm Parameter Value"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns2"</font></td></tr><tr ><td >IsEnsemble-17b54b46-74f0-4c72-80bf-94cb1b5abf7c</td><td ><font color="blue">let</font><br></br>    Source = Output,<br></br>    EnsembleDetailsRecord = Source[EnsembleDetails],<br></br>    <br></br>    #<font color="red">"IsEnsemble"</font> =    <br></br>        if EnsembleDetailsRecord <> <font color="blue">null</font> then<br></br>            <font color="blue">true</font><br></br>        else<br></br>            false<br></br><font color="blue">in</font><br></br>    #<font color="red">"IsEnsemble"</font></td></tr><tr ><td >Selector Table-84811904-381d-4faf-a0c2-9bb162dd84f8</td><td >VALUES('SliderValue'[Confidence Threshold])</td></tr><tr ><td >PopulationSize-584682ac-9044-45e8-8fa0-ea1dff74a9a3</td><td >GENERATESERIES(0, 100000, 1)</td></tr><tr ><td >UnitBenefit-1cc3fb42-edb5-4287-8940-2bbbd5478a35</td><td >GENERATESERIES(0, 100000, 1)</td></tr><tr ><td >UnitCost-86426883-8fbc-4308-bd2e-c5de17be2316</td><td >GENERATESERIES(0, 100000, 1)</td></tr><tr ><td >KeyInfluencers_TopPredictors-838190cf-b85e-48b0-972e-0ebd1d7451a6</td><td ><font color="blue">let</font><br></br>    Source = Output,<br></br>    KeyInfluencers1 = Output[KeyInfluencers],<br></br>    TopPredictors1 = <font color="purple">Table.FromRows</font>(KeyInfluencers1[TopPredictors], {<font color="red">"Feature Name"</font>, <font color="red">"Feature Type"</font>, <font color="red">"Feature Importance"</font>}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(TopPredictors1,{{<font color="red">"Feature Importance"</font>, <font color="blue">type</font> number}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type"</font></td></tr><tr ><td >KeyInfluencers_Breakdowns-af506967-bd96-4704-97cd-bdd9115ea0e0</td><td ><font color="blue">let</font><br></br>    Source = Output,<br></br>    KeyInfluencers1 = Output[KeyInfluencers],<br></br>    PredictorBreakdowns1 = <font color="purple">Table.FromRows</font>(KeyInfluencers1[PredictorBreakdowns], {<font color="red">"Feature Name"</font>, <font color="red">"Bin"</font>, "% of Positive Outcome"}),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(PredictorBreakdowns1,{{"% of Positive Outcome", <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Changed Type"</font>, each [#"% of Positive Outcome"] <> 0)<br></br><font color="blue">in</font><br></br>    #<font color="red">"Filtered Rows"</font></td></tr></table><script>
	var toggler = document.getElementsByClassName("caret");
	for (var i = 0; i < toggler.length; i++){
		toggler[i].addEventListener("click", function() {
			this.parentElement.querySelector(".nested").classList.toggle("active");
		});
	}
		
	var togglerAll = document.getElementsByClassName("dropDownCaret");
	for (var j=0; j<togglerAll.length; j++){
		togglerAll[j].addEventListener("click", function(event){
			if (event.currentTarget != event.target) return;
			if(this.parentElement.querySelector(".nested").classList.contains("active")){
				this.querySelectorAll(".nested").forEach(function(currentValue, currentIndex, listObj) {
					if(currentValue.classList.contains("active")){
						currentValue.classList.remove("active");
					}
				});
			}
			else{
				this.querySelectorAll(".nested").forEach(function(currentValue, currentIndex, listObj) {
					if(!currentValue.classList.contains("active")){
						currentValue.classList.add("active");
					}
				});
			}
		});
	}
</script></body></html>